<xml xmlns="https://developers.google.com/blockly/xml"><variables><variable id="UZE#jftZXG;q9-1JU`mW">PLAYER</variable><variable id="Ud+_=J)0X:#(cw:%1jRV">PLAYING</variable><variable id="0sd3FeBhi^*/xb26g7-.">left</variable><variable id="Cd0L?o^Ik_~U{h#=wS}u">right</variable><variable id="WnMkLy9Vh/!%W97Z7jxt">EventBothOutOfField</variable><variable id="$2?r_dExhb![xGkyV69]">EventLeftOutOfField</variable><variable id="8jCaH$Q!egL%TC69-Egq">EventRightOutOfField</variable></variables><block type="pxt-on-start" id="=6=Erc/f~c1N;5iC4pbk" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="YwssKb$x)^2~TDOeksYi"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let PLAYING = false" numlines="1" declaredvars="PLAYING"></mutation><next><block type="typescript_statement" id="S/)]rqekcdSF[{o|Ws?p"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum Player {" line1="    //% block=&quot;blue&quot;" line2="    //% block.loc.nl=&quot;blauw&quot;" line3="    A," line4="    //% block=&quot;yellow&quot;" line5="    //% block.loc.nl=&quot;geel&quot;" line6="    B" line7="}" numlines="8"></mutation><next><block type="typescript_statement" id="+E,([UVlF%I%]wC*K8ls"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let PLAYER = Player.A" numlines="1" declaredvars="PLAYER"></mutation><next><block type="typescript_statement" id="JEMWT95ozcguP!BeP$(8"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum Led {" line1="    //% block=&quot;left led&quot;" line2="    //% block.loc.nl=&quot;linker led&quot;" line3="    Left," line4="    //% block=&quot;right led&quot;" line5="    //% block.loc.nl=&quot;rechter led&quot;" line6="    Right," line7="    //% block=&quot;both leds&quot;" line8="    //% block.loc.nl=&quot;beide leds&quot;" line9="    Both" line10="}" numlines="11"></mutation><next><block type="typescript_statement" id="*QhbI]cXE]#FnH5|9}m+"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum Color {" line1="    //% block=&quot;none&quot;" line2="    //% block.loc.nl=&quot;geen&quot;" line3="    None = 0x000000," line4="    //% block=&quot;green&quot;" line5="    //% block.loc.nl=&quot;groen&quot;" line6="    Green = 0x00FF00," line7="    //% block=&quot;blue&quot;" line8="    //% block.loc.nl=&quot;blauw&quot;" line9="    Blue = 0x0000FF," line10="    //% block=&quot;yellow&quot;" line11="    //% block.loc.nl=&quot;geel&quot;" line12="    Yellow = 0xFFFF00," line13="    //% block=&quot;black&quot;" line14="    //% block.loc.nl=&quot;zwart&quot;" line15="    Black = 0x000000," line16="    //% block=&quot;red&quot;" line17="    //% block.loc.nl=&quot;rood&quot;" line18="    Red = 0xFF0000," line19="    //% block=&quot;white&quot;" line20="    //% block.loc.nl=&quot;wit&quot;" line21="    White = 0xFFFFFF," line22="    //% block=&quot;orange&quot;" line23="    //% block.loc.nl=&quot;oranje&quot;" line24="    Orange = 0xFFA500," line25="    //% block=&quot;cyan&quot;" line26="    //% block.loc.nl=&quot;cyaan&quot;" line27="    Cyan = 0x00FFFF," line28="    //% block=&quot;magenta&quot;" line29="    //% block.loc.nl=&quot;magenta&quot;" line30="    Magenta = 0xFF00FF," line31="    //% block=&quot;indigo&quot;" line32="    //% block.loc.nl=&quot;indigo&quot;" line33="    Indigo = 0x4b0082," line34="    //% block=&quot;violet&quot;" line35="    //% block.loc.nl=&quot;violet&quot;" line36="    Violet = 0x8a2be2," line37="    //% block=&quot;purple&quot;" line38="    //% block.loc.nl=&quot;paars&quot;" line39="    Purple = 0xFF00FF" line40="}" numlines="41"></mutation><next><block type="typescript_statement" id="w)j0c@X:e+%}lC2Gjc6g"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum Tracking {" line1="    //% block=&quot;◌ ◌ ◌ ◌&quot; " line2="    State_0," line3="    //% block=&quot;● ◌ ◌ ◌&quot; " line4="    State_1," line5="    //% block=&quot;◌ ● ◌ ◌&quot; " line6="    State_2," line7="    //% block=&quot;● ● ◌ ◌&quot; " line8="    State_3," line9="    //% block=&quot;◌ ◌ ● ◌&quot; " line10="    State_4," line11="    //% block=&quot;● ◌ ● ◌&quot; " line12="    State_5," line13="    //% block=&quot;◌ ● ● ◌&quot; " line14="    State_6," line15="    //% block=&quot;● ● ● ◌&quot; " line16="    State_7," line17="    //% block=&quot;◌ ◌ ◌ ●&quot; " line18="    State_8," line19="    //% block=&quot;● ◌ ◌ ●&quot; " line20="    State_9," line21="    //% block=&quot;◌ ● ◌ ●&quot; " line22="    State_10," line23="    //% block=&quot;● ● ◌ ●&quot;" line24="    State_11," line25="    //% block=&quot;◌ ◌ ● ●&quot; " line26="    State_12," line27="    //% block=&quot;● ◌ ● ●&quot; " line28="    State_13," line29="    //% block=&quot;◌ ● ● ●&quot; " line30="    State_14," line31="    //% block=&quot;● ● ● ●&quot; " line32="    State_15" line33="}" numlines="34"></mutation><next><block type="typescript_statement" id=":hFYEMr#RnE^@PvvCy`F"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum TrackValue {" line1="    //% block=&quot;◌&quot; " line2="    Off = 0," line3="    //% block=&quot;●&quot; " line4="    On = 1" line5="}" numlines="6"></mutation><next><block type="typescript_statement" id="6DFN$fHCJ5!8u3[Vv8#_"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum TrackSensor {" line1="    //% block=&quot;far left&quot;" line2="    //% block.loc.nl=&quot;ver links&quot;" line3="    FarLeft = 1," line4="    //% block=&quot;left&quot;" line5="    //% block.loc.nl=&quot;links&quot;" line6="    Left = 2," line7="    //% block=&quot;right&quot;" line8="    //% block.loc.nl=&quot;rechts&quot;" line9="    Right = 4," line10="    //% block=&quot;far right&quot;" line11="    //% block.loc.nl=&quot;ver rechts&quot;" line12="    FarRight = 8" line13="}" numlines="14"></mutation><next><block type="typescript_statement" id="GZJ]9WTtIOR$iRkDSU{;"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace CutebotProV2 {" line1="" line2="    const cutebotProAddr = 0x10" line3="" line4="    function delay_ms(ms: number) {" line5="        let endTime = input.runningTime() + ms;" line6="        while (endTime &gt; input.runningTime()) { }" line7="    }" line8="" line9="    export function pid_delay_ms(ms: number) {" line10="        let time = control.millis() + ms" line11="        while (1) {" line12="            i2cCommandSend(0xA0, [0x05])" line13="            if (pins.i2cReadNumber(cutebotProAddr, NumberFormat.UInt8LE, false) || control.millis() &gt;= time) {" line14="                basic.pause(500)" line15="                break" line16="            }" line17="            basic.pause(10)" line18="        }" line19="    }" line20="" line21="    export function i2cCommandSend(command: number, params: number[]) {" line22="        let buff = pins.createBuffer(params.length + 4);" line23="        buff[0] = 0xFF;" line24="        buff[1] = 0xF9;" line25="        buff[2] = command;" line26="        buff[3] = params.length;" line27="        for (let i = 0; i &lt; params.length; i++) {" line28="            buff[i + 4] = params[i];" line29="        }" line30="        pins.i2cWriteBuffer(cutebotProAddr, buff);" line31="        delay_ms(1);" line32="    }" line33="" line34="    export function motorControl(leftSpeed: number, rightSpeed: number): void {" line35="        // speed in % [-100, 100]" line36="" line37="//        if (!PLAYING) return" line38="" line39="        let direction: number = 0;" line40="        if (leftSpeed &lt; 0)" line41="            direction |= 0x01;" line42="        if (rightSpeed &lt; 0)" line43="            direction |= 0x02;" line44="        i2cCommandSend(0x10, [2, Math.abs(leftSpeed), Math.abs(rightSpeed), direction]);" line45="    }" line46="" line47="    export function runDistance(speed: number, distance: number): void {" line48="        // speed in % [-100, -40] backward and [40, 100] forward" line49="        // distance in cm [0, 6000]" line50="" line51="//        if (!PLAYING) return" line52="" line53="        distance = ((distance &gt; 6000 ? 6000 : distance) &lt; 0 ? 0 : distance);" line54="        distance *= 10 // cm to mm" line55="        let distance_h = distance &gt;&gt; 8;" line56="        let distance_l = distance &amp; 0xFF;" line57="" line58="        let direction2: number" line59="        if (speed &lt;= 0) {" line60="            speed = -speed" line61="            direction2 = 3" line62="        } else" line63="            direction2 = 0" line64="  " line65="        speed *= 5 // % to mm/s" line66="        speed = ((speed &gt; 500 ? 500 : speed) &lt; 200 ? 200 : speed);" line67="        let speed_h = speed &gt;&gt; 8;" line68="        let speed_l = speed &amp; 0xFF;" line69="" line70="        i2cCommandSend(0x84, [distance_h, distance_l, speed_h, speed_l, direction2]);" line71="        pid_delay_ms(Math.round(distance * 1.0 / 1000 * 8000 + 3000))" line72="    }" line73="" line74="    export function servoControl(angle: number): void {" line75="        // angle [0, 180]" line76="" line77="        if (!PLAYING) return" line78="" line79="        i2cCommandSend(0x40, [1, angle]);" line80="    }" line81="" line82="    export function ledColor(led: Led, rgb: number): void {" line83="        let red = (rgb &gt;&gt; 16) &amp; 0xFF;" line84="        let green = (rgb &gt;&gt; 8) &amp; 0xFF;" line85="        let blue = (rgb) &amp; 0xFF;" line86="        i2cCommandSend(0x20, [led, red, green, blue]);" line87="    }" line88="" line89="    export function trackingState(): number {" line90="        i2cCommandSend(0x60, [0x00])" line91="        let state = pins.i2cReadNumber(cutebotProAddr, NumberFormat.UInt8LE, true)" line92="        return state" line93="    }" line94="" line95="/*" line96="    export function trackSensor(sensor: TrackSensor): number {" line97="        let channel: number" line98="        switch (sensor) {" line99="            case TrackSensor.FarLeft: channel = 0; break;" line100="            case TrackSensor.Left: channel = 0; break;" line101="            case TrackSensor.Right: channel = 0; break;" line102="            case TrackSensor.FarRight: channel = 0; break;" line103="        }" line104="        i2cCommandSend(0x60, [0x02, channel])" line105="        return pins.i2cReadNumber(cutebotProAddr, NumberFormat.UInt8LE, false)" line106="    }" line107="*/" line108="" line109="    export function ultrasonic(): number {" line110="        // send pulse" line111="        pins.setPull(DigitalPin.P8, PinPullMode.PullNone);" line112="        pins.digitalWritePin(DigitalPin.P8, 0);" line113="        control.waitMicros(2);" line114="        pins.digitalWritePin(DigitalPin.P8, 1);" line115="        control.waitMicros(10);" line116="        pins.digitalWritePin(DigitalPin.P8, 0);" line117="        // read pulse" line118="        const d = pins.pulseIn(DigitalPin.P12, PulseValue.High, 2500) / 0.96;" line119="        if (!d) return 999" line120="        return Math.floor(d * 34 / 2 / 1000);" line121="    }" line122="}" numlines="123"></mutation><next><block type="device_show_number" id="A1kBw_1a|_jwu.n@=6}="><comment pinned="false" h="80" w="160">Next code is original to the current 'pxt-soccer-player' library.
(MIT-license)</comment><value name="number"><shadow type="math_number" id="g;niUYrTGKR(#bE:{P^+"><field name="NUM">1</field></shadow></value><next><block type="device_pause" id="tM|Az%|#z5H/wfXM3ooy"><value name="pause"><shadow type="timePicker" id="e]h_w@#PJjpZQR!Py|bo"><field name="ms">1000</field></shadow></value><next><block type="function_call" id="=#|)dIaaluuuTh5:e0~L"><mutation name="display" functionid="w%ZU)GO8#Ve^L60SNHgZ"></mutation><next><block type="typescript_statement" id="la3J8yE~Q0m4Q;~w2qTj"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum Move {" line1="    //% block=&quot;forward&quot;" line2="    //% block.loc.nl=&quot;vooruit&quot;" line3="    Forward," line4="    //% block=&quot;backward&quot;" line5="    //% block.loc.nl=&quot;achteruit&quot;" line6="    Backward" line7="}" numlines="8"></mutation><next><block type="typescript_statement" id="gdJ^%glX|o?zr31Dm)3H"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum Bend {" line1="    //% block=&quot;go straight&quot;" line2="    //% block.loc.nl=&quot;ga rechtdoor&quot;" line3="    None," line4="    //% block=&quot;turn to the left&quot;" line5="    //% block.loc.nl=&quot;draai naar links&quot;" line6="    Left," line7="    //% block=&quot;turn to the right&quot;" line8="    //% block.loc.nl=&quot;draai naar rechts&quot;" line9="    Right" line10="}" numlines="11"></mutation><next><block type="typescript_statement" id="X/a:Q_lx2JYzly!BJEiC"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum Side {" line1="    //% block=&quot;both sides&quot;" line2="    //% block.loc.nl=&quot;beide kanten&quot;" line3="    Both," line4="    //% block=&quot;the left side&quot;" line5="    //% block.loc.nl=&quot;de linker kant&quot;" line6="    Left," line7="    //% block=&quot;the right side&quot;" line8="    //% block.loc.nl=&quot;de rechter kant&quot;" line9="    Right" line10="}" numlines="11"></mutation><next><block type="typescript_statement" id="Cj?F),FKbkUqsCr34qQd"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="type eventHandler = () =&gt; void" numlines="1"></mutation><next><block type="typescript_statement" id="D?|ak4Xa9zQb6Ys8p5Yh"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let EventLeftOutOfField: eventHandler" numlines="1" declaredvars="EventLeftOutOfField"></mutation><next><block type="typescript_statement" id="e8r=z2gjs?gcU%~YERoc"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let EventRightOutOfField: eventHandler" numlines="1" declaredvars="EventRightOutOfField"></mutation><next><block type="typescript_statement" id="whWA`}?|P~H%09$D*=VJ"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let EventBothOutOfField: eventHandler" numlines="1" declaredvars="EventBothOutOfField"></mutation><next><block type="typescript_statement" id="lofzR6s/?n!0C`@GQvH,"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let EventWinner: eventHandler" numlines="1" declaredvars="EventWinner"></mutation><next><block type="typescript_statement" id="0/dx7Zxbda7Jal2#Pt`h"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let EventLoser: eventHandler" numlines="1" declaredvars="EventLoser"></mutation><next><block type="typescript_statement" id="I|:B)iuR]?:%a|Dv(2Ev"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace CSumoPlayer {" line1="" line2="    //% color=&quot;#FFCC00&quot;" line3="    //% block=&quot;when %side is out of the field&quot;" line4="    //% block.loc.nl=&quot;wanneer %side buiten het speelveld is&quot;" line5="    export function onEventLeftOutOfField(side: Side, programmableCode: () =&gt; void): void {" line6="        switch (side) {" line7="            case Side.Both: EventBothOutOfField = programmableCode; break;" line8="            case Side.Left: EventLeftOutOfField = programmableCode; break;" line9="            case Side.Right: EventRightOutOfField = programmableCode; break;" line10="        }" line11="    }" line12="" line13="    //% block=&quot;game started&quot;" line14="    //% block.loc.nl=&quot;spel is gestart&quot;" line15="    export function isPlaying() {" line16="        return PLAYING" line17="    }" line18="" line19="    //% block=&quot;stop&quot;" line20="    //% block.loc.nl=&quot;stop&quot;" line21="    export function stop() {" line22="        CutebotProV2.motorControl(0, 0)" line23="    }" line24="" line25="    //% block=&quot;move %dir and %bend&quot;" line26="    //% block.loc.nl=&quot;rijd %dir en %bend&quot;" line27="    export function run(dir: Move, bend: Bend) {" line28="        let speed: number" line29="        if (dir == Move.Forward) speed = 20" line30="        else speed = -20" line31="" line32="        switch (bend) {" line33="            case Bend.None: CutebotProV2.motorControl(speed, speed); break;" line34="            case Bend.Left: CutebotProV2.motorControl(speed/2, speed); break;" line35="            case Bend.Right: CutebotProV2.motorControl(speed, speed/2); break;" line36="        }" line37="    }" line38="" line39="    //% block=&quot;turn to the opponent&quot;" line40="    //% block.loc.nl=&quot;draai richting tegenstander&quot;" line41="    export function findOpponent() {" line42="        let cm: number" line43="        CutebotProV2.motorControl(-14, 14)" line44="        do {" line45="            cm = CutebotProV2.ultrasonic()" line46="        } while (cm &lt; 5|| cm &gt; 30)" line47="        CutebotProV2.motorControl(0, 0)" line48="    }" line49="" line50="    //% block=&quot;choose player %player&quot;" line51="    //% block.loc.nl=&quot;kies speler %player&quot;" line52="    export function setPlayer(player: Player) {" line53="        PLAYER = player" line54="        display()" line55="    }" line56="" line57="    //% subcategory=&quot;Show&quot;" line58="    //% color=&quot;#00CC00&quot;" line59="    //% block=&quot;turn %led color %color&quot;" line60="    //% block.loc.nl=&quot;kleur %led %color&quot;" line61="    //% color.defl=Color.White" line62="    export function showColor(led: Led, color: Color) {" line63="        CutebotProV2.ledColor(led, color)" line64="    }" line65="" line66="    //% subcategory=&quot;Show&quot;" line67="    //% color=&quot;#00CC00&quot;" line68="    //% block=&quot;turn both leds off&quot;" line69="    //% block.loc.nl=&quot;schakel beide leds uit&quot;" line70="    export function turnLedsOff() {" line71="        CutebotProV2.ledColor( Led.Both, Color.None)" line72="    }" line73="" line74="    //% subcategory=&quot;Show&quot;" line75="    //% color=&quot;#FFCC00&quot;" line76="    //% block=&quot;when the loser&quot;" line77="    //% block.loc.nl=&quot;als er verloren is&quot;" line78="    export function onEventLoser(programmableCode: () =&gt; void): void {" line79="        EventLoser = programmableCode;" line80="    }" line81="" line82="    //% subcategory=&quot;Show&quot;" line83="    //% color=&quot;#FFCC00&quot;" line84="    //% block=&quot;when the winner&quot;" line85="    //% block.loc.nl=&quot;als er gewonnen is&quot;" line86="    export function onEventWinner(programmableCode: () =&gt; void): void {" line87="        EventWinner = programmableCode;" line88="    }" line89="}" numlines="90"></mutation></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type="device_button_event" id="vt!quH_g0[U^?w%L%ZnL" x="1045" y="0"><field name="NAME">Button.A</field><statement name="HANDLER"><block type="controls_if" id="p;:9t;hZ|qX`sIoYC|UF"><mutation else="1"></mutation><value name="IF0"><shadow type="logic_boolean" id="oi-eE(vpnRu^Ce^|Bqj-"><field name="BOOL">TRUE</field></shadow><block type="logic_compare" id="43WD[cdwVOW!Dyakm1`w"><field name="OP">EQ</field><value name="A"><shadow type="math_number" id="i{`0#-}wo+_tTzSHb}Xg"><field name="NUM">0</field></shadow><block type="variables_get" id=";V{E9l8#u_:PuzbUx^#!"><field name="VAR" id="UZE#jftZXG;q9-1JU`mW">PLAYER</field></block></value><value name="B"><shadow type="math_number" id="]@!S:=@iUe/;MP-+`[cw"><field name="NUM">0</field></shadow><block type="typescript_expression" id=".+)(M|TwvzkU#f2f#7Y8"><field name="EXPRESSION">Player.A</field></block></value></block></value><statement name="DO0"><block type="typescript_statement" id="hbb!#s8ft:jPAecW._*."><mutation xmlns="http://www.w3.org/1999/xhtml" line0="PLAYER = Player.B" numlines="1"></mutation></block></statement><statement name="ELSE"><block type="typescript_statement" id="Q+Jtr2MB{)_VOnPy;#=b"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="PLAYER = Player.A" numlines="1"></mutation></block></statement><next><block type="function_call" id="qFpEF@%zEx[u;Nm|e},E"><mutation name="display" functionid="w%ZU)GO8#Ve^L60SNHgZ"></mutation></block></next></block></statement></block><block type="device_button_event" id="y{EDN|+_LO`no^$TOuYM" x="1494" y="0"><field name="NAME">Button.B</field><statement name="HANDLER"><block type="variables_set" id="Inl1f0n!^p[gf%@I-fa`"><field name="VAR" id="Ud+_=J)0X:#(cw:%1jRV">PLAYING</field><value name="VALUE"><shadow type="math_number" id="ddm.WuEvG++Kd-cNg^M@"><field name="NUM">0</field></shadow><block type="logic_boolean" id="j*_IUm9r8G;N9|*CAr(["><field name="BOOL">FALSE</field></block></value><next><block type="typescript_statement" id="bX4vpkoK?kDdeB[*n]J-"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="CutebotProV2.motorControl(0, 0)" numlines="1"></mutation></block></next></block></statement></block><block type="device_forever" id="CuT@@i}WG^6]_kFvcuWM" x="1901" y="0"><statement name="HANDLER"><block type="typescript_statement" id="s5Zz2{j6JiU@h}A:IUIJ"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let state2 = CutebotProV2.trackingState()" numlines="1" declaredvars="state2"></mutation><next><block type="typescript_statement" id="S2kbt(4Kmxm6;f]v{#l|"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let left = state2 &amp; (TrackSensor.FarLeft + TrackSensor.Left)" numlines="1" declaredvars="left"></mutation><next><block type="typescript_statement" id="jLDD@DdLupw`yWOnSG57"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let right = state2 &amp; (TrackSensor.FarRight + TrackSensor.Right)" numlines="1" declaredvars="right"></mutation><next><block type="controls_if" id="r|mf0iOtM3i[RU*dcIhL"><mutation elseif="2"></mutation><value name="IF0"><shadow type="logic_boolean" id="@vB$({y_r|b}]pz#Cpq8"><field name="BOOL">TRUE</field></shadow><block type="logic_operation" id="KkZDEQEbV~%FDa7-,zY8"><field name="OP">AND</field><value name="A"><shadow type="logic_boolean" id="#/uq!J#8JJ2U8F5l(-qy"><field name="BOOL">TRUE</field></shadow><block type="variables_get" id="uad4%/hJeIt:f+(UZ`+t"><field name="VAR" id="0sd3FeBhi^*/xb26g7-.">left</field></block></value><value name="B"><shadow type="logic_boolean" id="2lNE*o,yTE;putakoq?H"><field name="BOOL">TRUE</field></shadow><block type="variables_get" id="Rh!|gC$.fQx-gszdfe}O"><field name="VAR" id="Cd0L?o^Ik_~U{h#=wS}u">right</field></block></value></block></value><statement name="DO0"><block type="controls_if" id="7cM.yZ_Bwqn|pWdbc*m:"><value name="IF0"><shadow type="logic_boolean" id="~M-ba(`LhrRlVsoc?x1*"><field name="BOOL">TRUE</field></shadow><block type="variables_get" id="QsRG=QJ:7%1~Qd!i?{FN"><field name="VAR" id="WnMkLy9Vh/!%W97Z7jxt">EventBothOutOfField</field></block></value><statement name="DO0"><block type="typescript_statement" id="[*M^eq,_o}.cIC/hO%-0"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="EventBothOutOfField" numlines="1"></mutation></block></statement></block></statement><value name="IF1"><shadow type="logic_boolean" id="|I.L+3X{wCq]VTxaA**m"><field name="BOOL">TRUE</field></shadow><block type="variables_get" id="EdFHBob8:VY2J!wp3=Ni"><field name="VAR" id="0sd3FeBhi^*/xb26g7-.">left</field></block></value><statement name="DO1"><block type="controls_if" id="1yB(Mhl]1fX},J.W|byB"><value name="IF0"><shadow type="logic_boolean" id="m2[kd-F6gQ`|V~#+27+?"><field name="BOOL">TRUE</field></shadow><block type="variables_get" id="H#Mj!nJf(7Er_PPUFhpY"><field name="VAR" id="$2?r_dExhb![xGkyV69]">EventLeftOutOfField</field></block></value><statement name="DO0"><block type="typescript_statement" id="vp*.l[;l$YL//KC.OpW4"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="EventLeftOutOfField" numlines="1"></mutation></block></statement></block></statement><value name="IF2"><shadow type="logic_boolean" id="piUjDzDTNz_Mo#x3D~zF"><field name="BOOL">TRUE</field></shadow><block type="variables_get" id="ModwNo3nWlVBG,x)0pY9"><field name="VAR" id="Cd0L?o^Ik_~U{h#=wS}u">right</field></block></value><statement name="DO2"><block type="controls_if" id="cw{dp_X6Zv:ALE@=-z,n"><value name="IF0"><shadow type="logic_boolean" id="Yy|3+4;L.~2Ft5[Ycc-P"><field name="BOOL">TRUE</field></shadow><block type="variables_get" id="CP{pp_P#iIFMq/|t,{N:"><field name="VAR" id="8jCaH$Q!egL%TC69-Egq">EventRightOutOfField</field></block></value><statement name="DO0"><block type="typescript_statement" id="Hi`u*CdQRGFZ8;hwkMg1"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="EventRightOutOfField" numlines="1"></mutation></block></statement></block></statement></block></next></block></next></block></next></block></statement></block><block type="function_definition" id="3d.h)uZ0f;p2Agh?d$/d" x="2532" y="0"><mutation name="handle" functionid="f/S1nFw0UasI{rm/FMu;"><arg name="cmd" id="8iw4scduvw9h4c9go9w" type="number"></arg></mutation><field name="function_name">handle</field><value name="8iw4scduvw9h4c9go9w"><block type="argument_reporter_number" id="JlQ0l{Y9xc[pSx6,J;~0" deletable="false"><field name="VALUE">cmd</field></block></value><statement name="STACK"><block type="typescript_statement" id="J-z/4bNO|u{IGS6(]q=L"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="switch (cmd) {" line1="        case CMatch.COMMAND.Start:" line2="            PLAYING = true" line3="            break;" line4="        case CMatch.COMMAND.Stop:" line5="            CutebotProV2.motorControl(0, 0)" line6="            PLAYING = false" line7="            break;" line8="        case CMatch.COMMAND.WinnerA:" line9="        case CMatch.COMMAND.DisqualB:" line10="            if (PLAYER == Player.A) {" line11="                if (EventWinner) EventWinner()" line12="                display()" line13="            }" line14="            else {" line15="                if (EventLoser) EventLoser()" line16="                display()" line17="            }" line18="            break;" line19="        case CMatch.COMMAND.WinnerB:" line20="        case CMatch.COMMAND.DisqualA:" line21="            if (PLAYER == Player.B) {" line22="                if (EventWinner) EventWinner()" line23="                display()" line24="            }" line25="            else {" line26="                if (EventLoser) EventLoser()" line27="                display()" line28="            }" line29="            break;" line30="    }" numlines="31"></mutation><next><block type="variables_set" id="K~O[45S9;InOOW1-_xFl"><field name="VAR" id="Ud+_=J)0X:#(cw:%1jRV">PLAYING</field><value name="VALUE"><shadow type="math_number" id="i`ArMkVcqXXueQd6}ktA"><field name="NUM">0</field></shadow><block type="logic_compare" id=".q]K)v$Ic%:56`o-b|l2"><field name="OP">EQ</field><value name="A"><shadow type="math_number" id="cKN;VnRekVSR9}}(OHD("><field name="NUM">0</field></shadow><block type="argument_reporter_number" id="eA~kh_j^yB{`NoNBPlbo"><field name="VALUE">cmd</field></block></value><value name="B"><shadow type="math_number" id="lYrgLwgk(^wXCjffS}1Y"><field name="NUM">0</field></shadow><block type="typescript_expression" id="7Z=5q=s^K;me$v7o[@ju"><field name="EXPRESSION">CMatch.COMMAND.Start</field></block></value></block></value></block></next></block></statement></block><block type="function_definition" id="rv?+cNw[$58WSJSe.=,%" x="3167" y="0"><mutation name="display" functionid="w%ZU)GO8#Ve^L60SNHgZ"></mutation><field name="function_name">display</field><statement name="STACK"><block type="controls_if" id="/n_P~r%GBsZ]:DNO5%n}"><mutation else="1"></mutation><value name="IF0"><shadow type="logic_boolean" id="5ZI=AF%nNkNAJpLt~:xi"><field name="BOOL">TRUE</field></shadow><block type="logic_compare" id="W@@FKMKF1ou2;:~T8R$K"><field name="OP">EQ</field><value name="A"><shadow type="math_number" id="#B~^#]l/PuG[3I;{FBZ$"><field name="NUM">0</field></shadow><block type="variables_get" id="c;[o(Y@A$)oz^|`9lnPV"><field name="VAR" id="UZE#jftZXG;q9-1JU`mW">PLAYER</field></block></value><value name="B"><shadow type="math_number" id="YGz.%vBaI!m?dOD%9bZS"><field name="NUM">0</field></shadow><block type="typescript_expression" id="wvwy5b*XTS8.K9SM8Iwu"><field name="EXPRESSION">Player.A</field></block></value></block></value><statement name="DO0"><block type="typescript_statement" id="T9Rt$dK:UJ)pw`zmx^lT"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="CutebotProV2.ledColor(Led.Both, Color.Blue)" numlines="1"></mutation></block></statement><statement name="ELSE"><block type="typescript_statement" id="c:/$h(03WPa3VoIrx7kC"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="CutebotProV2.ledColor(Led.Both, Color.Yellow)" numlines="1"></mutation></block></statement></block></statement></block></xml>