{"entries":[{"timestamp":1753169010168,"editorVersion":"8.0.11","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":185,"diffs":[[1,"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":515,"diffs":[[1,""]]},{"start1":1,"length1":10243,"diffs":[[1,""]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":121,"length1":122,"diffs":[[1,"        \"microphone\": \"*\"\n"]]},{"start1":238,"length1":31,"diffs":[[1,"    \"additionalFilePaths\": []\n"]]}]}]},{"timestamp":1753169603051,"editorVersion":"8.0.11","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":961,"length1":36,"diffs":[[1,""]]},{"start1":1664,"length1":106,"diffs":[[1,""]]},{"start1":1683,"length1":356,"diffs":[[1,""]]},{"start1":2403,"length1":29,"diffs":[[1,"    basic.showNumber(OBSTRUCTIONS)\n    showPlayerColor()\n"]]},{"start1":2497,"length1":65,"diffs":[[1,"//% block=\"Soccer\"\n//% block.loc.nl=\"Voetbal\"\nnamespace CSoccerPlayer {\n    function isHeading(): boolean {\n        let heading = input.compassHeading()\n        if ((HEADING >= 354 || HEADING <= 5) && (heading >= 355 || heading <= 5))\n            return true\n        if ((heading >= HEADING - 5) && (heading <= HEADING + 5))\n            return true\n        return false\n    }\n"]]},{"start1":3070,"length1":0,"diffs":[[1,"    //             M1    M2    M3    M4\n    let INVERT = [false, false, false, false]\n\n    function go(speedM2: number, speedM3: number) {\n        if (INVERT[Nezha.Motor.M2])\n            Nezha.motorSpeed(Nezha.Motor.M2, -speedM2)\n        else\n            Nezha.motorSpeed(Nezha.Motor.M2, speedM2)\n        if (INVERT[Nezha.Motor.M3])\n            Nezha.motorSpeed(Nezha.Motor.M3, -speedM3)\n        else\n            Nezha.motorSpeed(Nezha.Motor.M3, speedM3)\n    }\n\n"]]}]}]},{"timestamp":1753169812775,"editorVersion":"8.0.11","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":145,"length1":1,"diffs":[[1,"  https://github.com/elecfreaks/pxt-nezha/blob/master/main.ts\n- the ElecFreaks 'pxt-PlanetX' library:\n  https://github.com/elecfreaks/pxt-PlanetX/blob/master/basic.ts\n  https://github.com/elecfreaks/pxt-PlanetX/blob/master/display.ts\n- the ElecFreaks 'pxt-PlanetX-AI' library:\n  https://github.com/elecfreaks/pxt-PlanetX-AI/blob/master/main.ts\n"]]}]}]},{"timestamp":1753170653427,"editorVersion":"8.0.11","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":145,"length1":64,"diffs":[[1,""]]}]}]},{"timestamp":1753170655189,"editorVersion":"8.0.11","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":3,"length1":50,"diffs":[[1,"From here to the 'pxt-soccer-player' specific code,\n"]]},{"start1":107,"length1":110,"diffs":[[1,"- the ElecFreaks 'pxt-nezha' library:\nhttps://github.com/elecfreaks/pxt-Cutebot-Pro/blob/master/v2.ts\n\n"]]},{"start1":237,"length1":4078,"diffs":[[1,""]]}]}]},{"timestamp":1753171254551,"editorVersion":"8.0.11","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":334,"length1":40,"diffs":[[1,"    //% block.loc.nl=\"links\"\n    Rightright\n"]]},{"start1":380,"length1":969,"diffs":[[1,""]]},{"start1":4152,"length1":228,"diffs":[[1,"    export function ledColor(led: number, r: number, g: number, b: number): void {\n        i2cCommandSend(0x20, [led, Math.abs(r), Math.abs(g), Math.abs(b)]);\n"]]}]}]},{"timestamp":1753171853210,"editorVersion":"8.0.11","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":313,"length1":22,"diffs":[[1,"    //% block=\"left\"\n"]]},{"start1":364,"length1":70,"diffs":[[1,"    Right\n"]]},{"start1":5017,"length1":0,"diffs":[[1,"    * led:0-left led, 1-right led，2-both leds\n    * r, g, b: value [0, 255] as off to bright\n"]]},{"start1":5117,"length1":60,"diffs":[[1,"    export function ledColor(led: number, rgb: number): void {\n"]]}]}]},{"timestamp":1753171977198,"editorVersion":"8.0.11","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":5026,"length1":0,"diffs":[[1,"\n    /**\n    * set the RGB color of selected led(s)\n    */\n"]]}]}]},{"timestamp":1753173293905,"editorVersion":"8.0.11","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":5026,"length1":1,"diffs":[[1,""]]}]}]},{"timestamp":1753173295248,"editorVersion":"8.0.11","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1406,"length1":159,"diffs":[[1,""]]},{"start1":1447,"length1":13,"diffs":[[1,"    State_0 = 0,\n"]]},{"start1":1489,"length1":13,"diffs":[[1,"    State_1 = 1,\n"]]},{"start1":1531,"length1":13,"diffs":[[1,"    State_2 = 2,\n"]]},{"start1":1573,"length1":13,"diffs":[[1,"    State_3 = 3,\n"]]},{"start1":1615,"length1":13,"diffs":[[1,"    State_4 = 4,\n"]]},{"start1":1657,"length1":13,"diffs":[[1,"    State_5 = 5,\n"]]},{"start1":1699,"length1":13,"diffs":[[1,"    State_6 = 6,\n"]]},{"start1":1741,"length1":13,"diffs":[[1,"    State_7 = 7,\n"]]},{"start1":1783,"length1":13,"diffs":[[1,"    State_8 = 8,\n"]]},{"start1":1825,"length1":13,"diffs":[[1,"    State_9 = 9,\n"]]},{"start1":1867,"length1":14,"diffs":[[1,"    State_10 = 10,\n"]]},{"start1":1910,"length1":14,"diffs":[[1,"    State_11 = 11,\n"]]},{"start1":1954,"length1":14,"diffs":[[1,"    State_12 = 12,\n"]]},{"start1":1998,"length1":14,"diffs":[[1,"    State_13 = 13,\n"]]},{"start1":2042,"length1":14,"diffs":[[1,"    State_14 = 14,\n"]]},{"start1":2086,"length1":13,"diffs":[[1,"    State_15 = 15\n"]]},{"start1":4855,"length1":0,"diffs":[[1,"    /**\n     * servo control module\n     * angle: [0, 180]\n     */\n"]]},{"start1":4978,"length1":26,"diffs":[[1,""]]},{"start1":7778,"length1":0,"diffs":[[1,"    export enum Direction {\n        //% block=\"forward\"\n        //% block.loc.nl=\"vooruit\"\n        Forward,\n        //% block=\"reverse\"\n        //% block.loc.nl=\"achteruit\"\n        Reverse\n    }\n\n"]]}]}]},{"timestamp":1753174097723,"editorVersion":"8.0.11","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1478,"length1":16,"diffs":[[1,"    Forward,\n"]]}]}]},{"timestamp":1753174105522,"editorVersion":"8.0.11","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1406,"length1":12,"diffs":[[1,"enum Direction {\n"]]},{"start1":1478,"length1":13,"diffs":[[1,"    Forward = ,\n"]]},{"start1":4070,"length1":0,"diffs":[[1,"     * run a specific distance(distance.max=6000cm, distance.min=0cm)\n"]]},{"start1":4172,"length1":48,"diffs":[[1,"     * direction: 0-forward, 1-backward\n"]]},{"start1":4253,"length1":90,"diffs":[[1,"    export function runDistance(speed: number, direction: number, distance: number): void {\n"]]},{"start1":4506,"length1":85,"diffs":[[1,"        let direction_flag = (direction == 0 ? 0 : 3);\n"]]}]}]},{"timestamp":1753174702302,"editorVersion":"8.0.11","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":3566,"length1":0,"diffs":[[1,"    /**\n     * motorControl\n     * leftSpeed:[-100, 100] as percentage reverse to forward\n     * rightSpeed:[-100, 100] as percentage reverse to forward\n     */\n"]]},{"start1":3807,"length1":34,"diffs":[[1,""]]},{"start1":4062,"length1":29,"diffs":[[1,"     * speed: [20, 50] in cm/s \n"]]},{"start1":4183,"length1":243,"diffs":[[1,"    export function runDistance(speed: number, direction: Move, distance: number): void {\n        distance *= 10\n        speed *= 10\n"]]},{"start1":4434,"length1":36,"diffs":[[1,"        let direction_flag = (direction == Move.Forward ? 0 : 3);\n        speed /= 2\n"]]},{"start1":4545,"length1":180,"diffs":[[1,"            speed = 0;\n        } else {\n            speed = (speed > 500 ? 500 : speed) < 200 ? 200 : speed;\n        }\n"]]},{"start1":4734,"length1":1,"diffs":[[1,""]]}]}]},{"timestamp":1753175293706,"editorVersion":"8.0.11","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":3801,"length1":31,"diffs":[[1,"            direction |= 0x2;\n"]]},{"start1":3927,"length1":0,"diffs":[[1,"    /**\n     * speed: [40, 100] in %\n     * direction: Move.Forward or Move.Backward\n     * distance: [0, 6000] in cm\n     */\n"]]},{"start1":4126,"length1":179,"diffs":[[1,"        // speed in % [-100, -20] and [20, 100]\n        // distance in cm\n"]]},{"start1":4235,"length1":0,"diffs":[[1,"        speed *= 5 // % to mm/s [-500, -200] and [200, 500]\n\n        let tempDistance = distance\n"]]},{"start1":4415,"length1":30,"diffs":[[1,"        let direction_flag: number\n"]]},{"start1":4503,"length1":26,"diffs":[[1,"            direction_flag = 3\n"]]},{"start1":4549,"length1":61,"diffs":[[1,"            direction_flag = 0\n        \n"]]},{"start1":4727,"length1":155,"diffs":[[1,"        i2cCommandSend(0x84, [distance_h, distance_l, speed_h, speed_l, direction_flag]);\n        pid_delay_ms(Math.round(tempDistance * 1.0 / 1000 * 8000 + 3000))\n"]]}]}]},{"timestamp":1753175783325,"editorVersion":"8.0.11","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":5145,"length1":666,"diffs":[[1,""]]}]}]},{"timestamp":1753176379095,"editorVersion":"8.0.11","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":5515,"length1":170,"diffs":[[1,"            TrackSensor.Left: channel = 0; break;\n            TrackSensor.Right: channel = 0; break;\n            TrackSensor.FarRight: channel = 0; break;\n"]]}]}]},{"timestamp":1753176390032,"editorVersion":"8.0.11","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":8647,"length1":13,"diffs":[[1,""]]}]}]},{"timestamp":1753177336578,"editorVersion":"8.0.11","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":8647,"length1":17,"diffs":[[1,"            \n"]]}]}]},{"timestamp":1753177337697,"editorVersion":"8.0.11","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":5340,"length1":3,"diffs":[[1,""]]},{"start1":5826,"length1":3,"diffs":[[1,""]]},{"start1":6274,"length1":115,"diffs":[[1,"let EventOutsideField: eventHandler\n"]]},{"start1":8346,"length1":19,"diffs":[[1,""]]},{"start1":8370,"length1":248,"diffs":[[1,"    //% block=\"when outside the field\"\n    //% block.loc.nl=\"wanneer buiten het speelveld\"\n    export function onEventOutsideField(programmableCode: () => void): void {\n        EventOutsideField = programmableCode;\n"]]},{"start1":8592,"length1":562,"diffs":[[1,""]]},{"start1":8647,"length1":66,"diffs":[[1,"            let \n            if (ColorSensor.readColor() != Color.White)\n                if (EventOutsideField) EventOutsideField()\n"]]}]}]},{"timestamp":1753178060968,"editorVersion":"8.0.11","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":9399,"length1":0,"diffs":[[1,"            \n"]]}]}]},{"timestamp":1753178118842,"editorVersion":"8.0.11","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":9399,"length1":490,"diffs":[[1,""]]},{"start1":9417,"length1":0,"diffs":[[1,"    //% block=\"motor %motor runs in inverted direction\"\n    //% block.loc.nl=\"motor %motor draait in omgekeerde richting\"\n    export function invertMotor(motor: Nezha.Motor) {\n        INVERT[motor] = true\n    }\n\n"]]},{"start1":9761,"length1":0,"diffs":[[1,"    //% subcategory=\"Bal-controle\"\n    //% block=\"shoot the ball\"\n    //% block.loc.nl=\"schiet de bal\"\n    export function shoot() {\n        if (PLAYING) {\n            Nezha.servoAngle(Nezha.Servo.S1, 65)\n        }\n    }\n\n    //% subcategory=\"Bal-controle\"\n    //% block=\"take the ball in possession\"\n    //% block.loc.nl=\"neem balbezit\"\n    export function possessBall() {\n        if (PLAYING) {\n            Nezha.servoAngle(Nezha.Servo.S1, 120)\n        }\n    }\n\n"]]},{"start1":10354,"length1":49,"diffs":[[1,"    export function run(cm: number, dir: Direction) {\n"]]},{"start1":10604,"length1":125,"diffs":[[1,"    //% block=\"turn to the goal\"\n    //% block.loc.nl=\"draai richting het doel\"\n    export function findGoal() {\n"]]},{"start1":10740,"length1":0,"diffs":[[1,"            CameraAI.recognize(CameraAI.Recognize.Color)\n            go(15, -15)\n            do {\n                CameraAI.fetchCamera()\n                if (!CameraAI.itemCount())\n                    continue\n                basic.pause(1)\n            } while (CameraAI.itemIsColor(Color.Blue))\n            go(0, 0)\n"]]},{"start1":11103,"length1":126,"diffs":[[1,"    //% block=\"turn to the start direction\"\n    //% block.loc.nl=\"draai in de startrichting\"\n    export function turnToOpponent() {\n"]]},{"start1":11258,"length1":0,"diffs":[[1,"            go(15, -15)\n            while (!isHeading()) { basic.pause(1) }\n            go(0, 0)\n"]]},{"start1":11402,"length1":114,"diffs":[[1,"    //% block=\"run to the ball\"\n    //% block.loc.nl=\"rijd naar de bal\"\n    export function approachBall() {\n"]]},{"start1":11534,"length1":0,"diffs":[[1,"            CameraAI.recognize(CameraAI.Recognize.Ball)\n            go(15, 15)\n            do {\n                CameraAI.fetchCamera()\n            } while (CameraAI.itemPosY() > 200)\n            go(0, 0)\n"]]},{"start1":11755,"length1":0,"diffs":[[1,"    //% subcategory=\"Bewegen\"\n    //% block=\"turn to the ball\"\n    //% block.loc.nl=\"draai richting de bal\"\n    export function findBall() {\n        if (PLAYING) {\n            CameraAI.recognize(CameraAI.Recognize.Ball)\n            go(15, -15)\n            do {\n                CameraAI.fetchCamera()\n            } while (!CameraAI.itemCount())\n            go(0, 0)\n        }\n    }\n\n"]]},{"start1":12191,"length1":0,"diffs":[[1,"    //% block=\"rotate at %pace pace\"\n    //% block.loc.nl=\"draai in %pace tempo\"\n    export function setPace(pace: LedRing.Pace) {\n        LedRing.setPace(pace)\n    }\n\n    //% subcategory=\"Kleuren\"\n    //% color=\"#FFCC44\"\n    //% block=\"rotate a snake %rot with color %color\"\n    //% block.loc.nl=\"draai een slang %rot met kleur %color\"\n    //% color.defl=Color.White\n    export function showSnake(rot: LedRing.Rotation, color: Color) {\n        LedRing.snake(color, rot)\n    }\n\n    //% subcategory=\"Kleuren\"\n    //% color=\"#FFCC44\"\n    //% block=\"rotate rainbow %rot\"\n    //% block.loc.nl=\"draai de regenboog %rot\"\n    export function showRainbow(rot: LedRing.Rotation) {\n        LedRing.rainbow(rot)\n    }\n\n    //% subcategory=\"Kleuren\"\n    //% color=\"#FFCC44\"\n"]]},{"start1":13108,"length1":0,"diffs":[[1,"        LedRing.setRingRGB(rgb(color))\n"]]},{"start1":13184,"length1":0,"diffs":[[1,"    //% color=\"#FFCC44\"\n    //% block=\"show player color\"\n    //% block.loc.nl=\"toon de spelerkleur\"\n    export function playerColor() {\n        showPlayerColor()\n    }\n\n    //% subcategory=\"Kleuren\"\n"]]},{"start1":13435,"length1":81,"diffs":[[1,"    //% block=\"turn all leds off\"\n    //% block.loc.nl=\"schakel alle leds uit\"\n"]]},{"start1":13550,"length1":0,"diffs":[[1,"        LedRing.setClear()\n"]]}]}]},{"timestamp":1753178711070,"editorVersion":"8.0.11","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":174,"diffs":[[1,""]]},{"start1":1406,"length1":0,"diffs":[[1,"enum Move {\n    //% block=\"forward\"\n    //% block.loc.nl=\"vooruit\"\n    Forward,\n    //% block=\"backward\"\n    //% block.loc.nl=\"achteruit\"\n    Backward\n}\n\n"]]},{"start1":3680,"length1":31,"diffs":[[1,""]]},{"start1":4103,"length1":30,"diffs":[[1,""]]},{"start1":4865,"length1":31,"diffs":[[1,""]]},{"start1":5922,"length1":151,"diffs":[[1,"enum Player {\n    //% block=\"A\"\n    //% block.loc.nl=\"A\"\n    A,\n    //% block=\"B\"\n    //% block.loc.nl=\"B\"\n    B\n"]]},{"start1":6038,"length1":17,"diffs":[[1,"let PLAYER = Player.A\nlet PLAYING = false\nlet POINTS = 0\n"]]},{"start1":6096,"length1":3,"diffs":[[1,""]]},{"start1":9323,"length1":274,"diffs":[[1,"        if (PLAYING) {\n            let state = CutebotProV2.trackingState()\n            let left = state & (TrackSensor.FarLeft + TrackSensor.Left)\n            let right = state & (TrackSensor.FarRight + TrackSensor.Right)\n            if (left && right) {\n                if (EventBothOutOfField) EventBothOutOfField\n            }\n            else\n            if (left) {\n                if (EventLeftOutOfField) EventLeftOutOfField\n            }\n            else\n            if (right) {\n                if (EventRightOutOfField) EventRightOutOfField\n            }\n"]]},{"start1":9899,"length1":203,"diffs":[[1,""]]},{"start1":10217,"length1":0,"diffs":[[1,"        if (PLAYING) {\n            let speed = (dir ? -15 : 15)\n            go(speed, speed)\n            basic.pause(cm * 1500)\n            go(0, 0)\n        }\n"]]},{"start1":10538,"length1":0,"diffs":[[1,"        if (PLAYING) {\n        }\n"]]},{"start1":10734,"length1":0,"diffs":[[1,"        if (PLAYING) {\n        }\n"]]},{"start1":10918,"length1":0,"diffs":[[1,"        if (PLAYING) {\n        }\n"]]},{"start1":11204,"length1":0,"diffs":[[1,"    //% group=\"Leds apart\"\n"]]},{"start1":11379,"length1":0,"diffs":[[1,"    //% subcategory=\"Kleuren\"\n    //% group=\"Leds apart\"\n    //% color=\"#FFCC44\"\n    //% block=\"turn selected leds on\"\n    //% block.loc.nl=\"schakel de ingestelde leds aan\"\n    export function turnLedsOn() {\n        LedRing.showBuffer()\n    }\n\n    //% subcategory=\"Kleuren\"\n    //% group=\"Leds apart\"\n    //% color=\"#FFCC44\"\n    //% block=\"rotate a full circle %rot at %pace pace\"\n    //% block.loc.nl=\"draai een hele cirkel %rot in %pace tempo\"\n    //% pace.defl=Pace.Normal\n    export function circle(rot: LedRing.Rotation, pace: LedRing.Pace) {\n        LedRing.showBuffer()\n        for (let i = 0; i <= 7; i++) {\n            LedRing.rotate(rot)\n            LedRing.showBuffer()\n            basic.pause(pace)\n        }\n    }\n\n    //% subcategory=\"Kleuren\"\n    //% group=\"Leds apart\"\n    //% color=\"#FFCC44\"\n    //% block=\"rotate one position %rot\"\n    //% block.loc.nl=\"draai één positie %rot\"\n    export function rotate(rot: LedRing.Rotation) {\n        LedRing.rotate(rot)\n        LedRing.showBuffer()\n    }\n\n    //% subcategory=\"Kleuren\"\n    //% group=\"Leds apart\"\n    //% color=\"#FFCC44\"\n    //% block=\"set led %num to color %color\"\n    //% block.loc.nl=\"stel led %num in op kleur %color\"\n    //% color.defl=Color.White\n    //% num.min=1 num.max=8\n    export function setLed(num: number, color: Color) {\n        LedRing.setPixelRGB(num - 1, rgb(color))\n    }\n\n"]]},{"start1":12795,"length1":0,"diffs":[[1,"    //% block=\"after an obstruction\"\n    //% block.loc.nl=\"na een obstructie\"\n    export function onEventObstruction(programmableCode: () => void): void {\n        EventObstruction = programmableCode;\n    }\n\n    //% subcategory=\"Show\"\n    //% color=\"#FFCC00\"\n"]]},{"start1":13486,"length1":0,"diffs":[[1,"\n    //% subcategory=\"Show\"\n    //% color=\"#FFCC00\"\n    //% block=\"when a goal against\"\n    //% block.loc.nl=\"bij een doelpunt tegen\"\n    export function onEventGoalAgainst(programmableCode: () => void): void {\n        EventGoalAgainst = programmableCode;\n    }\n\n    //% subcategory=\"Show\"\n    //% color=\"#FFCC00\"\n    //% block=\"when an asset goal\"\n    //% block.loc.nl=\"bij een doelpunt voor\"\n    export function onEventGoalAsset(programmableCode: () => void): void {\n        EventGoalAsset = programmableCode;\n    }\n"]]}]}]},{"timestamp":1753179299240,"editorVersion":"8.0.11","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":84,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":6188,"length1":254,"diffs":[[1,"enum Direction {\n\n"]]},{"start1":6362,"length1":86,"diffs":[[1,""]]},{"start1":10093,"length1":180,"diffs":[[1,"    //% block=\"run %cm cm %dir\"\n    //% block.loc.nl=\"rijd %cm cm %dir\"\n    //% cm.max=20 cm.min=0\n    export function run(cm: number, dir: Move) {\n"]]},{"start1":10278,"length1":114,"diffs":[[1,"    //% block=\"turn to the opponent\"\n    //% block.loc.nl=\"draai richting tegenstander\"\n    export function findOpponent() {\n"]]},{"start1":10603,"length1":125,"diffs":[[1,"    //% block=\"push the opponent\"\n    //% block.loc.nl=\"duw de tegenstander\"\n    export function pushOpponent() {\n"]]},{"start1":10724,"length1":155,"diffs":[[1,""]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":334,"length1":44,"diffs":[[1,""]]}]},{"type":"added","filename":"test.ts","value":"// tests gaan hier; deze zal niet worden gecompileerd wanneer dit pakket wordt gebruikt als extensie.\n"}]}],"snapshots":[{"timestamp":1753169010167,"editorVersion":"8.0.11","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"pxt-sumo-player\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1753170829196,"editorVersion":"8.0.11","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"/*\nFrom here to the 'pxt-sudo-player' specific code,\nthe code below is a composition and refactoring of:\n- the ElecFreaks 'pxt-Cutebot-Pro' library:\n  https://github.com/elecfreaks/pxt-Cutebot-Pro/blob/master/v2.ts\nAll under MIT-license.\n*/\n\nenum TrackingState {\n    //% block=\"◌ ◌ ◌ ◌\" \n    Tracking_State_0 = 0,\n    //% block=\"● ◌ ◌ ◌\" \n    Tracking_State_8 = 1,\n    //% block=\"◌ ● ◌ ◌\" \n    Tracking_State_3 = 2,\n    //% block=\"● ● ◌ ◌\" \n    Tracking_State_11 = 3,\n    //% block=\"◌ ◌ ● ◌\" \n    Tracking_State_2 = 4,\n    //% block=\"● ◌ ● ◌\" \n    Tracking_State_10 = 5,\n    //% block=\"◌ ● ● ◌\" \n    Tracking_State_1 = 6,\n    //% block=\"● ● ● ◌\" \n    Tracking_State_9 = 7,\n    //% block=\"◌ ◌ ◌ ●\" \n    Tracking_State_12 = 8,\n    //% block=\"● ◌ ◌ ●\" \n    Tracking_State_4 = 9,\n    //% block=\"◌ ● ◌ ●\" \n    Tracking_State_15 = 10,\n    //% block=\"● ● ◌ ●\"\n    Tracking_State_7 = 11,\n    //% block=\"◌ ◌ ● ●\" \n    Tracking_State_14 = 12,\n    //% block=\"● ◌ ● ●\" \n    Tracking_State_6 = 13,\n    //% block=\"◌ ● ● ●\" \n    Tracking_State_13 = 14,\n    //% block=\"● ● ● ●\" \n    Tracking_State_5 = 15\n}\n\nenum TrackbitType {\n    //% block=\"◌\" \n    State_0 = 0,\n    //% block=\"●\" \n    State_1 = 1\n}\nenum TrackbitChannel {\n    //% block=\"far left\"\n    //% block.loc.nl=\"ver links\"\n    FarLeft = 1,\n    //% block=\"left\"\n    //% block.loc.nl=\"links\"\n    Left = 2,\n    //% block=\"right\"\n    //% block.loc.nl=\"rechts\"\n    Right = 4,\n    //% block=\"far right\"\n    //% block.loc.nl=\"ver rechts\"\n    FarRight = 8\n}\n\n/*\nNext code is original to the current 'pxt-soccer-player' library.\n(MIT-license)\n*/\n\nenum Player {\n    //% block=\"A\"\n    //% block.loc.nl=\"A\"\n    A,\n    //% block=\"B\"\n    //% block.loc.nl=\"B\"\n    B\n}\n\nlet PLAYER = Player.A\nlet PLAYING = false\nlet POINTS = 0\n\ninput.onButtonPressed(Button.A, function () {\n    if (PLAYER == Player.A)\n        PLAYER = Player.B\n    else\n        PLAYER = Player.A\n    display()\n})\n\ntype eventHandler = () => void\nlet EventOutsideField: eventHandler\nlet EventWinner: eventHandler\nlet EventLoser: eventHandler\n\nfunction handle(cmd: number) {\n\n    /*\n        commands are defined in pxt-soccer as:\n    \n        export enum COMMAND {\n            Start,\n            Stop,\n            PointA,\n            PointB,\n            DisallowA,\n            DisallowB,\n            WinnerA,\n            WinnerB,\n            DisqualA,\n            DisqualB\n        }\n    */\n    switch (cmd) {\n        case CMatch.COMMAND.Start:\n            PLAYING = true\n            break;\n        case CMatch.COMMAND.PointA:\n            if (PLAYER == Player.A) {\n                POINTS += 1\n                display()\n            }\n            break;\n        case CMatch.COMMAND.PointB:\n            if (PLAYER == Player.B) {\n                POINTS += 1\n                display()\n            }\n            break;\n        case CMatch.COMMAND.DisallowA:\n            if (PLAYER == Player.A && POINTS > 0) {\n                POINTS -= 1\n                display()\n            }\n            break;\n        case CMatch.COMMAND.DisallowB:\n            if (PLAYER == Player.B && POINTS > 0) {\n                POINTS -= 1\n                display()\n            }\n            break;\n        case CMatch.COMMAND.WinnerA:\n        case CMatch.COMMAND.DisqualB:\n            if (PLAYER == Player.A) {\n                if (EventWinner) EventWinner()\n                display()\n            }\n            else {\n                if (EventLoser) EventLoser()\n                display()\n            }\n            break;\n        case CMatch.COMMAND.WinnerB:\n        case CMatch.COMMAND.DisqualA:\n            if (PLAYER == Player.B) {\n                if (EventWinner) EventWinner()\n                display()\n            }\n            else {\n                if (EventLoser) EventLoser()\n                display()\n            }\n            break;\n    }\n    PLAYING = (cmd == CMatch.COMMAND.Start)\n}\n\nfunction display() {\n    basic.showNumber(POINTS)\n}\n\n//% color=\"#00CC00\" icon=\"\\uf1f9\"\n//% block=\"Sudo\"\n//% block.loc.nl=\"Sudo\"\nnamespace CSudoPlayer {\n\n    export enum Direction {\n        //% block=\"forward\"\n        //% block.loc.nl=\"vooruit\"\n        Forward,\n        //% block=\"reverse\"\n        //% block.loc.nl=\"achteruit\"\n        Reverse\n    }\n\n    //% color=\"#FFCC00\"\n    //% block=\"when outside the field\"\n    //% block.loc.nl=\"wanneer buiten het speelveld\"\n    export function onEventOutsideField(programmableCode: () => void): void {\n        EventOutsideField = programmableCode;\n    }\n\n    basic.forever(function () {\n        if (PLAYING) {\n            if (ColorSensor.readColor() != Color.White)\n                if (EventOutsideField) EventOutsideField()\n        }\n    })\n\n    //% block=\"motor %motor runs in inverted direction\"\n    //% block.loc.nl=\"motor %motor draait in omgekeerde richting\"\n    export function invertMotor(motor: Nezha.Motor) {\n        INVERT[motor] = true\n    }\n\n    //% block=\"game started\"\n    //% block.loc.nl=\"spel is gestart\"\n    export function isPlaying() {\n        return PLAYING\n    }\n\n    //% subcategory=\"Bal-controle\"\n    //% block=\"shoot the ball\"\n    //% block.loc.nl=\"schiet de bal\"\n    export function shoot() {\n        if (PLAYING) {\n            Nezha.servoAngle(Nezha.Servo.S1, 65)\n        }\n    }\n\n    //% subcategory=\"Bal-controle\"\n    //% block=\"take the ball in possession\"\n    //% block.loc.nl=\"neem balbezit\"\n    export function possessBall() {\n        if (PLAYING) {\n            Nezha.servoAngle(Nezha.Servo.S1, 120)\n        }\n    }\n\n    //% subcategory=\"Bewegen\"\n    //% block=\"run %cm cm %dir\"\n    //% block.loc.nl=\"rijd %cm cm %dir\"\n    //% cm.max=20 cm.min=0\n    export function run(cm: number, dir: Direction) {\n        if (PLAYING) {\n            let speed = (dir ? -15 : 15)\n            go(speed, speed)\n            basic.pause(cm * 1500)\n            go(0, 0)\n        }\n    }\n\n    //% subcategory=\"Bewegen\"\n    //% block=\"turn to the goal\"\n    //% block.loc.nl=\"draai richting het doel\"\n    export function findGoal() {\n        if (PLAYING) {\n            CameraAI.recognize(CameraAI.Recognize.Color)\n            go(15, -15)\n            do {\n                CameraAI.fetchCamera()\n                if (!CameraAI.itemCount())\n                    continue\n                basic.pause(1)\n            } while (CameraAI.itemIsColor(Color.Blue))\n            go(0, 0)\n        }\n    }\n\n    //% subcategory=\"Bewegen\"\n    //% block=\"turn to the start direction\"\n    //% block.loc.nl=\"draai in de startrichting\"\n    export function turnToOpponent() {\n        if (PLAYING) {\n            go(15, -15)\n            while (!isHeading()) { basic.pause(1) }\n            go(0, 0)\n        }\n    }\n\n    //% subcategory=\"Bewegen\"\n    //% block=\"run to the ball\"\n    //% block.loc.nl=\"rijd naar de bal\"\n    export function approachBall() {\n        if (PLAYING) {\n            CameraAI.recognize(CameraAI.Recognize.Ball)\n            go(15, 15)\n            do {\n                CameraAI.fetchCamera()\n            } while (CameraAI.itemPosY() > 200)\n            go(0, 0)\n        }\n    }\n\n    //% subcategory=\"Bewegen\"\n    //% block=\"turn to the ball\"\n    //% block.loc.nl=\"draai richting de bal\"\n    export function findBall() {\n        if (PLAYING) {\n            CameraAI.recognize(CameraAI.Recognize.Ball)\n            go(15, -15)\n            do {\n                CameraAI.fetchCamera()\n            } while (!CameraAI.itemCount())\n            go(0, 0)\n        }\n    }\n\n    //% subcategory=\"Kleuren\"\n    //% color=\"#FFCC44\"\n    //% block=\"rotate at %pace pace\"\n    //% block.loc.nl=\"draai in %pace tempo\"\n    export function setPace(pace: LedRing.Pace) {\n        LedRing.setPace(pace)\n    }\n\n    //% subcategory=\"Kleuren\"\n    //% color=\"#FFCC44\"\n    //% block=\"rotate a snake %rot with color %color\"\n    //% block.loc.nl=\"draai een slang %rot met kleur %color\"\n    //% color.defl=Color.White\n    export function showSnake(rot: LedRing.Rotation, color: Color) {\n        LedRing.snake(color, rot)\n    }\n\n    //% subcategory=\"Kleuren\"\n    //% color=\"#FFCC44\"\n    //% block=\"rotate rainbow %rot\"\n    //% block.loc.nl=\"draai de regenboog %rot\"\n    export function showRainbow(rot: LedRing.Rotation) {\n        LedRing.rainbow(rot)\n    }\n\n    //% subcategory=\"Kleuren\"\n    //% color=\"#FFCC44\"\n    //% block=\"show color %color\"\n    //% block.loc.nl=\"toon de kleur %color\"\n    //% color.defl=Color.White\n    export function showColor(color: Color) {\n        LedRing.setRingRGB(rgb(color))\n    }\n\n    //% subcategory=\"Kleuren\"\n    //% color=\"#FFCC44\"\n    //% block=\"show player color\"\n    //% block.loc.nl=\"toon de spelerkleur\"\n    export function playerColor() {\n        showPlayerColor()\n    }\n\n    //% subcategory=\"Kleuren\"\n    //% group=\"Leds apart\"\n    //% color=\"#FFCC44\"\n    //% block=\"turn all leds off\"\n    //% block.loc.nl=\"schakel alle leds uit\"\n    export function turnLedsOff() {\n        LedRing.setClear()\n    }\n\n    //% subcategory=\"Kleuren\"\n    //% group=\"Leds apart\"\n    //% color=\"#FFCC44\"\n    //% block=\"turn selected leds on\"\n    //% block.loc.nl=\"schakel de ingestelde leds aan\"\n    export function turnLedsOn() {\n        LedRing.showBuffer()\n    }\n\n    //% subcategory=\"Kleuren\"\n    //% group=\"Leds apart\"\n    //% color=\"#FFCC44\"\n    //% block=\"rotate a full circle %rot at %pace pace\"\n    //% block.loc.nl=\"draai een hele cirkel %rot in %pace tempo\"\n    //% pace.defl=Pace.Normal\n    export function circle(rot: LedRing.Rotation, pace: LedRing.Pace) {\n        LedRing.showBuffer()\n        for (let i = 0; i <= 7; i++) {\n            LedRing.rotate(rot)\n            LedRing.showBuffer()\n            basic.pause(pace)\n        }\n    }\n\n    //% subcategory=\"Kleuren\"\n    //% group=\"Leds apart\"\n    //% color=\"#FFCC44\"\n    //% block=\"rotate one position %rot\"\n    //% block.loc.nl=\"draai één positie %rot\"\n    export function rotate(rot: LedRing.Rotation) {\n        LedRing.rotate(rot)\n        LedRing.showBuffer()\n    }\n\n    //% subcategory=\"Kleuren\"\n    //% group=\"Leds apart\"\n    //% color=\"#FFCC44\"\n    //% block=\"set led %num to color %color\"\n    //% block.loc.nl=\"stel led %num in op kleur %color\"\n    //% color.defl=Color.White\n    //% num.min=1 num.max=8\n    export function setLed(num: number, color: Color) {\n        LedRing.setPixelRGB(num - 1, rgb(color))\n    }\n\n    //% subcategory=\"Show\"\n    //% color=\"#FFCC00\"\n    //% block=\"after an obstruction\"\n    //% block.loc.nl=\"na een obstructie\"\n    export function onEventObstruction(programmableCode: () => void): void {\n        EventObstruction = programmableCode;\n    }\n\n    //% subcategory=\"Show\"\n    //% color=\"#FFCC00\"\n    //% block=\"when the loser\"\n    //% block.loc.nl=\"als er verloren is\"\n    export function onEventLoser(programmableCode: () => void): void {\n        EventLoser = programmableCode;\n    }\n\n    //% subcategory=\"Show\"\n    //% color=\"#FFCC00\"\n    //% block=\"when the winner\"\n    //% block.loc.nl=\"als er gewonnen is\"\n    export function onEventWinner(programmableCode: () => void): void {\n        EventWinner = programmableCode;\n    }\n\n    //% subcategory=\"Show\"\n    //% color=\"#FFCC00\"\n    //% block=\"when a goal against\"\n    //% block.loc.nl=\"bij een doelpunt tegen\"\n    export function onEventGoalAgainst(programmableCode: () => void): void {\n        EventGoalAgainst = programmableCode;\n    }\n\n    //% subcategory=\"Show\"\n    //% color=\"#FFCC00\"\n    //% block=\"when an asset goal\"\n    //% block.loc.nl=\"bij een doelpunt voor\"\n    export function onEventGoalAsset(programmableCode: () => void): void {\n        EventGoalAsset = programmableCode;\n    }\n}","README.md":"","pxt.json":"{\n    \"name\": \"pxt-sumo-player\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"pxt-match\": \"github:CBurg-College/pxt-match#d0bd682290a1c42a76f20bdd2091ac14a6d15c38\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1753173293905,"editorVersion":"8.0.11","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"/*\nFrom here to the 'pxt-sudo-player' specific code,\nthe code below is a composition and refactoring of:\n- the ElecFreaks 'pxt-Cutebot-Pro' library:\n  https://github.com/elecfreaks/pxt-Cutebot-Pro/blob/master/v2.ts\nAll under MIT-license.\n*/\n\nenum Led {\n    //% block=\"left\"\n    //% block.loc.nl=\"links\"\n    Left,\n    //% block=\"right\"\n    //% block.loc.nl=\"rechts\"\n    Right,\n    //% block=\"both\"\n    //% block.loc.nl=\"beide\"\n    Both\n}\n\nenum Color {\n    //% block=\"none\"\n    //% block.loc.nl=\"geen\"\n    None = 0x000000,\n    //% block=\"green\"\n    //% block.loc.nl=\"groen\"\n    Green = 0x00FF00,\n    //% block=\"blue\"\n    //% block.loc.nl=\"blauw\"\n    Blue = 0x0000FF,\n    //% block=\"yellow\"\n    //% block.loc.nl=\"geel\"\n    Yellow = 0xFFFF00,\n    //% block=\"black\"\n    //% block.loc.nl=\"zwart\"\n    Black = 0x000000,\n    //% block=\"red\"\n    //% block.loc.nl=\"rood\"\n    Red = 0xFF0000,\n    //% block=\"white\"\n    //% block.loc.nl=\"wit\"\n    White = 0xFFFFFF,\n    //% block=\"orange\"\n    //% block.loc.nl=\"oranje\"\n    Orange = 0xFFA500,\n    //% block=\"cyan\"\n    //% block.loc.nl=\"cyaan\"\n    Cyan = 0x00FFFF,\n    //% block=\"magenta\"\n    //% block.loc.nl=\"magenta\"\n    Magenta = 0xFF00FF,\n    //% block=\"indigo\"\n    //% block.loc.nl=\"indigo\"\n    Indigo = 0x4b0082,\n    //% block=\"violet\"\n    //% block.loc.nl=\"violet\"\n    Violet = 0x8a2be2,\n    //% block=\"purple\"\n    //% block.loc.nl=\"paars\"\n    Purple = 0xFF00FF\n}\n\nenum Tracking {\n    //% block=\"◌ ◌ ◌ ◌\" \n    State_0 = 0,\n    //% block=\"● ◌ ◌ ◌\" \n    State_1 = 1,\n    //% block=\"◌ ● ◌ ◌\" \n    State_2 = 2,\n    //% block=\"● ● ◌ ◌\" \n    State_3 = 3,\n    //% block=\"◌ ◌ ● ◌\" \n    State_4 = 4,\n    //% block=\"● ◌ ● ◌\" \n    State_5 = 5,\n    //% block=\"◌ ● ● ◌\" \n    State_6 = 6,\n    //% block=\"● ● ● ◌\" \n    State_7 = 7,\n    //% block=\"◌ ◌ ◌ ●\" \n    State_8 = 8,\n    //% block=\"● ◌ ◌ ●\" \n    State_9 = 9,\n    //% block=\"◌ ● ◌ ●\" \n    State_10 = 10,\n    //% block=\"● ● ◌ ●\"\n    State_11 = 11,\n    //% block=\"◌ ◌ ● ●\" \n    State_12 = 12,\n    //% block=\"● ◌ ● ●\" \n    State_13 = 13,\n    //% block=\"◌ ● ● ●\" \n    State_14 = 14,\n    //% block=\"● ● ● ●\" \n    State_15 = 15\n}\n\nenum TrackValue {\n    //% block=\"◌\" \n    Off = 0,\n    //% block=\"●\" \n    On = 1\n}\n\nenum TrackSensor {\n    //% block=\"far left\"\n    //% block.loc.nl=\"ver links\"\n    FarLeft = 1,\n    //% block=\"left\"\n    //% block.loc.nl=\"links\"\n    Left = 2,\n    //% block=\"right\"\n    //% block.loc.nl=\"rechts\"\n    Right = 4,\n    //% block=\"far right\"\n    //% block.loc.nl=\"ver rechts\"\n    FarRight = 8\n}\n\nnamespace CutebotProV2 {\n\n    const cutebotProAddr = 0x10\n\n    function delay_ms(ms: number) {\n        let endTime = input.runningTime() + ms;\n        while (endTime > input.runningTime()) { }\n    }\n\n    export function pid_delay_ms(ms: number) {\n        let time = control.millis() + ms\n        while (1) {\n            i2cCommandSend(0xA0, [0x05])\n            if (pins.i2cReadNumber(cutebotProAddr, NumberFormat.UInt8LE, false) || control.millis() >= time) {\n                basic.pause(500)\n                break\n            }\n            basic.pause(10)\n        }\n    }\n\n    export function i2cCommandSend(command: number, params: number[]) {\n        let buff = pins.createBuffer(params.length + 4);\n        buff[0] = 0xFF;\n        buff[1] = 0xF9;\n        buff[2] = command;\n        buff[3] = params.length;\n        for (let i = 0; i < params.length; i++) {\n            buff[i + 4] = params[i];\n        }\n        pins.i2cWriteBuffer(cutebotProAddr, buff);\n        delay_ms(1);\n    }\n\n    /**\n     * motorControl\n     * leftSpeed:[-100, 100] as percentage reverse to forward\n     * rightSpeed:[-100, 100] as percentage reverse to forward\n     */\n    export function motorControl(leftSpeed: number, rightSpeed: number): void {\n        let direction: number = 0;\n        if (leftSpeed < 0)\n            direction |= 0x01;\n        if (rightSpeed < 0)\n            direction |= 0x2;\n        i2cCommandSend(0x10, [2, Math.abs(leftSpeed), Math.abs(rightSpeed), direction]);\n    }\n\n    /**\n     * run a specific distance(distance.max=6000cm, distance.min=0cm)\n     * speed: [20, 50] in cm/s \n     * direction: 0-forward, 1-backward\n     * distance: [0, 6000] in cm\n     */\n    export function runDistance(speed: number, direction: number, distance: number): void {\n        distance *= 10\n        speed *= 10\n        let tempDistance = distance\n        let distance_h = distance >> 8;\n        let distance_l = distance & 0xFF;\n        let direction_flag = (direction == 0 ? 0 : 3);\n        if (speed <= 0) {\n            speed = 0;\n        } else {\n            speed = (speed > 500 ? 500 : speed) < 200 ? 200 : speed;\n        }\n        let speed_h = speed >> 8;\n        let speed_l = speed & 0xFF;\n        i2cCommandSend(0x84, [distance_h, distance_l, speed_h, speed_l, direction_flag]);\n        pid_delay_ms(Math.round(tempDistance * 1.0 / 1000 * 8000 + 3000))\n    }\n\n    /**\n     * servo control module\n     * angle: [0, 180]\n     */\n    export function servoControl(angle: number): void {\n        i2cCommandSend(0x40, [1, angle]);\n    }\n\n    /**\n    * set the RGB color of selected led(s)\n    */\n    export function ledColor(led: Led, rgb: number): void {\n        let red = (rgb >> 16) & 0xFF;\n        let green = (rgb >> 8) & 0xFF;\n        let blue = (rgb) & 0xFF;\n        i2cCommandSend(0x20, [led, red, green, blue]);\n    }\n}\n\n/*\nNext code is original to the current 'pxt-soccer-player' library.\n(MIT-license)\n*/\n\nenum Player {\n    //% block=\"A\"\n    //% block.loc.nl=\"A\"\n    A,\n    //% block=\"B\"\n    //% block.loc.nl=\"B\"\n    B\n}\n\nlet PLAYER = Player.A\nlet PLAYING = false\nlet POINTS = 0\n\ninput.onButtonPressed(Button.A, function () {\n    if (PLAYER == Player.A)\n        PLAYER = Player.B\n    else\n        PLAYER = Player.A\n    display()\n})\n\ntype eventHandler = () => void\nlet EventOutsideField: eventHandler\nlet EventWinner: eventHandler\nlet EventLoser: eventHandler\n\nfunction handle(cmd: number) {\n\n    /*\n        commands are defined in pxt-soccer as:\n    \n        export enum COMMAND {\n            Start,\n            Stop,\n            PointA,\n            PointB,\n            DisallowA,\n            DisallowB,\n            WinnerA,\n            WinnerB,\n            DisqualA,\n            DisqualB\n        }\n    */\n    switch (cmd) {\n        case CMatch.COMMAND.Start:\n            PLAYING = true\n            break;\n        case CMatch.COMMAND.PointA:\n            if (PLAYER == Player.A) {\n                POINTS += 1\n                display()\n            }\n            break;\n        case CMatch.COMMAND.PointB:\n            if (PLAYER == Player.B) {\n                POINTS += 1\n                display()\n            }\n            break;\n        case CMatch.COMMAND.DisallowA:\n            if (PLAYER == Player.A && POINTS > 0) {\n                POINTS -= 1\n                display()\n            }\n            break;\n        case CMatch.COMMAND.DisallowB:\n            if (PLAYER == Player.B && POINTS > 0) {\n                POINTS -= 1\n                display()\n            }\n            break;\n        case CMatch.COMMAND.WinnerA:\n        case CMatch.COMMAND.DisqualB:\n            if (PLAYER == Player.A) {\n                if (EventWinner) EventWinner()\n                display()\n            }\n            else {\n                if (EventLoser) EventLoser()\n                display()\n            }\n            break;\n        case CMatch.COMMAND.WinnerB:\n        case CMatch.COMMAND.DisqualA:\n            if (PLAYER == Player.B) {\n                if (EventWinner) EventWinner()\n                display()\n            }\n            else {\n                if (EventLoser) EventLoser()\n                display()\n            }\n            break;\n    }\n    PLAYING = (cmd == CMatch.COMMAND.Start)\n}\n\nfunction display() {\n    basic.showNumber(POINTS)\n}\n\n//% color=\"#00CC00\" icon=\"\\uf1f9\"\n//% block=\"Sudo\"\n//% block.loc.nl=\"Sudo\"\nnamespace CSudoPlayer {\n\n    export enum Direction {\n        //% block=\"forward\"\n        //% block.loc.nl=\"vooruit\"\n        Forward,\n        //% block=\"reverse\"\n        //% block.loc.nl=\"achteruit\"\n        Reverse\n    }\n\n    //% color=\"#FFCC00\"\n    //% block=\"when outside the field\"\n    //% block.loc.nl=\"wanneer buiten het speelveld\"\n    export function onEventOutsideField(programmableCode: () => void): void {\n        EventOutsideField = programmableCode;\n    }\n\n    basic.forever(function () {\n        if (PLAYING) {\n            if (ColorSensor.readColor() != Color.White)\n                if (EventOutsideField) EventOutsideField()\n        }\n    })\n\n    //% block=\"motor %motor runs in inverted direction\"\n    //% block.loc.nl=\"motor %motor draait in omgekeerde richting\"\n    export function invertMotor(motor: Nezha.Motor) {\n        INVERT[motor] = true\n    }\n\n    //% block=\"game started\"\n    //% block.loc.nl=\"spel is gestart\"\n    export function isPlaying() {\n        return PLAYING\n    }\n\n    //% subcategory=\"Bal-controle\"\n    //% block=\"shoot the ball\"\n    //% block.loc.nl=\"schiet de bal\"\n    export function shoot() {\n        if (PLAYING) {\n            Nezha.servoAngle(Nezha.Servo.S1, 65)\n        }\n    }\n\n    //% subcategory=\"Bal-controle\"\n    //% block=\"take the ball in possession\"\n    //% block.loc.nl=\"neem balbezit\"\n    export function possessBall() {\n        if (PLAYING) {\n            Nezha.servoAngle(Nezha.Servo.S1, 120)\n        }\n    }\n\n    //% subcategory=\"Bewegen\"\n    //% block=\"run %cm cm %dir\"\n    //% block.loc.nl=\"rijd %cm cm %dir\"\n    //% cm.max=20 cm.min=0\n    export function run(cm: number, dir: Direction) {\n        if (PLAYING) {\n            let speed = (dir ? -15 : 15)\n            go(speed, speed)\n            basic.pause(cm * 1500)\n            go(0, 0)\n        }\n    }\n\n    //% subcategory=\"Bewegen\"\n    //% block=\"turn to the goal\"\n    //% block.loc.nl=\"draai richting het doel\"\n    export function findGoal() {\n        if (PLAYING) {\n            CameraAI.recognize(CameraAI.Recognize.Color)\n            go(15, -15)\n            do {\n                CameraAI.fetchCamera()\n                if (!CameraAI.itemCount())\n                    continue\n                basic.pause(1)\n            } while (CameraAI.itemIsColor(Color.Blue))\n            go(0, 0)\n        }\n    }\n\n    //% subcategory=\"Bewegen\"\n    //% block=\"turn to the start direction\"\n    //% block.loc.nl=\"draai in de startrichting\"\n    export function turnToOpponent() {\n        if (PLAYING) {\n            go(15, -15)\n            while (!isHeading()) { basic.pause(1) }\n            go(0, 0)\n        }\n    }\n\n    //% subcategory=\"Bewegen\"\n    //% block=\"run to the ball\"\n    //% block.loc.nl=\"rijd naar de bal\"\n    export function approachBall() {\n        if (PLAYING) {\n            CameraAI.recognize(CameraAI.Recognize.Ball)\n            go(15, 15)\n            do {\n                CameraAI.fetchCamera()\n            } while (CameraAI.itemPosY() > 200)\n            go(0, 0)\n        }\n    }\n\n    //% subcategory=\"Bewegen\"\n    //% block=\"turn to the ball\"\n    //% block.loc.nl=\"draai richting de bal\"\n    export function findBall() {\n        if (PLAYING) {\n            CameraAI.recognize(CameraAI.Recognize.Ball)\n            go(15, -15)\n            do {\n                CameraAI.fetchCamera()\n            } while (!CameraAI.itemCount())\n            go(0, 0)\n        }\n    }\n\n    //% subcategory=\"Kleuren\"\n    //% color=\"#FFCC44\"\n    //% block=\"rotate at %pace pace\"\n    //% block.loc.nl=\"draai in %pace tempo\"\n    export function setPace(pace: LedRing.Pace) {\n        LedRing.setPace(pace)\n    }\n\n    //% subcategory=\"Kleuren\"\n    //% color=\"#FFCC44\"\n    //% block=\"rotate a snake %rot with color %color\"\n    //% block.loc.nl=\"draai een slang %rot met kleur %color\"\n    //% color.defl=Color.White\n    export function showSnake(rot: LedRing.Rotation, color: Color) {\n        LedRing.snake(color, rot)\n    }\n\n    //% subcategory=\"Kleuren\"\n    //% color=\"#FFCC44\"\n    //% block=\"rotate rainbow %rot\"\n    //% block.loc.nl=\"draai de regenboog %rot\"\n    export function showRainbow(rot: LedRing.Rotation) {\n        LedRing.rainbow(rot)\n    }\n\n    //% subcategory=\"Kleuren\"\n    //% color=\"#FFCC44\"\n    //% block=\"show color %color\"\n    //% block.loc.nl=\"toon de kleur %color\"\n    //% color.defl=Color.White\n    export function showColor(color: Color) {\n        LedRing.setRingRGB(rgb(color))\n    }\n\n    //% subcategory=\"Kleuren\"\n    //% color=\"#FFCC44\"\n    //% block=\"show player color\"\n    //% block.loc.nl=\"toon de spelerkleur\"\n    export function playerColor() {\n        showPlayerColor()\n    }\n\n    //% subcategory=\"Kleuren\"\n    //% group=\"Leds apart\"\n    //% color=\"#FFCC44\"\n    //% block=\"turn all leds off\"\n    //% block.loc.nl=\"schakel alle leds uit\"\n    export function turnLedsOff() {\n        LedRing.setClear()\n    }\n\n    //% subcategory=\"Kleuren\"\n    //% group=\"Leds apart\"\n    //% color=\"#FFCC44\"\n    //% block=\"turn selected leds on\"\n    //% block.loc.nl=\"schakel de ingestelde leds aan\"\n    export function turnLedsOn() {\n        LedRing.showBuffer()\n    }\n\n    //% subcategory=\"Kleuren\"\n    //% group=\"Leds apart\"\n    //% color=\"#FFCC44\"\n    //% block=\"rotate a full circle %rot at %pace pace\"\n    //% block.loc.nl=\"draai een hele cirkel %rot in %pace tempo\"\n    //% pace.defl=Pace.Normal\n    export function circle(rot: LedRing.Rotation, pace: LedRing.Pace) {\n        LedRing.showBuffer()\n        for (let i = 0; i <= 7; i++) {\n            LedRing.rotate(rot)\n            LedRing.showBuffer()\n            basic.pause(pace)\n        }\n    }\n\n    //% subcategory=\"Kleuren\"\n    //% group=\"Leds apart\"\n    //% color=\"#FFCC44\"\n    //% block=\"rotate one position %rot\"\n    //% block.loc.nl=\"draai één positie %rot\"\n    export function rotate(rot: LedRing.Rotation) {\n        LedRing.rotate(rot)\n        LedRing.showBuffer()\n    }\n\n    //% subcategory=\"Kleuren\"\n    //% group=\"Leds apart\"\n    //% color=\"#FFCC44\"\n    //% block=\"set led %num to color %color\"\n    //% block.loc.nl=\"stel led %num in op kleur %color\"\n    //% color.defl=Color.White\n    //% num.min=1 num.max=8\n    export function setLed(num: number, color: Color) {\n        LedRing.setPixelRGB(num - 1, rgb(color))\n    }\n\n    //% subcategory=\"Show\"\n    //% color=\"#FFCC00\"\n    //% block=\"after an obstruction\"\n    //% block.loc.nl=\"na een obstructie\"\n    export function onEventObstruction(programmableCode: () => void): void {\n        EventObstruction = programmableCode;\n    }\n\n    //% subcategory=\"Show\"\n    //% color=\"#FFCC00\"\n    //% block=\"when the loser\"\n    //% block.loc.nl=\"als er verloren is\"\n    export function onEventLoser(programmableCode: () => void): void {\n        EventLoser = programmableCode;\n    }\n\n    //% subcategory=\"Show\"\n    //% color=\"#FFCC00\"\n    //% block=\"when the winner\"\n    //% block.loc.nl=\"als er gewonnen is\"\n    export function onEventWinner(programmableCode: () => void): void {\n        EventWinner = programmableCode;\n    }\n\n    //% subcategory=\"Show\"\n    //% color=\"#FFCC00\"\n    //% block=\"when a goal against\"\n    //% block.loc.nl=\"bij een doelpunt tegen\"\n    export function onEventGoalAgainst(programmableCode: () => void): void {\n        EventGoalAgainst = programmableCode;\n    }\n\n    //% subcategory=\"Show\"\n    //% color=\"#FFCC00\"\n    //% block=\"when an asset goal\"\n    //% block.loc.nl=\"bij een doelpunt voor\"\n    export function onEventGoalAsset(programmableCode: () => void): void {\n        EventGoalAsset = programmableCode;\n    }\n}","README.md":"","pxt.json":"{\n    \"name\": \"pxt-sumo-player\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"pxt-match\": \"github:CBurg-College/pxt-match#d0bd682290a1c42a76f20bdd2091ac14a6d15c38\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1753175095814,"editorVersion":"8.0.11","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"/*\nFrom here to the 'pxt-sudo-player' specific code,\nthe code below is a composition and refactoring of:\n- the ElecFreaks 'pxt-Cutebot-Pro' library:\n  https://github.com/elecfreaks/pxt-Cutebot-Pro/blob/master/v2.ts\nAll under MIT-license.\n*/\n\nenum Led {\n    //% block=\"left\"\n    //% block.loc.nl=\"links\"\n    Left,\n    //% block=\"right\"\n    //% block.loc.nl=\"rechts\"\n    Right,\n    //% block=\"both\"\n    //% block.loc.nl=\"beide\"\n    Both\n}\n\nenum Color {\n    //% block=\"none\"\n    //% block.loc.nl=\"geen\"\n    None = 0x000000,\n    //% block=\"green\"\n    //% block.loc.nl=\"groen\"\n    Green = 0x00FF00,\n    //% block=\"blue\"\n    //% block.loc.nl=\"blauw\"\n    Blue = 0x0000FF,\n    //% block=\"yellow\"\n    //% block.loc.nl=\"geel\"\n    Yellow = 0xFFFF00,\n    //% block=\"black\"\n    //% block.loc.nl=\"zwart\"\n    Black = 0x000000,\n    //% block=\"red\"\n    //% block.loc.nl=\"rood\"\n    Red = 0xFF0000,\n    //% block=\"white\"\n    //% block.loc.nl=\"wit\"\n    White = 0xFFFFFF,\n    //% block=\"orange\"\n    //% block.loc.nl=\"oranje\"\n    Orange = 0xFFA500,\n    //% block=\"cyan\"\n    //% block.loc.nl=\"cyaan\"\n    Cyan = 0x00FFFF,\n    //% block=\"magenta\"\n    //% block.loc.nl=\"magenta\"\n    Magenta = 0xFF00FF,\n    //% block=\"indigo\"\n    //% block.loc.nl=\"indigo\"\n    Indigo = 0x4b0082,\n    //% block=\"violet\"\n    //% block.loc.nl=\"violet\"\n    Violet = 0x8a2be2,\n    //% block=\"purple\"\n    //% block.loc.nl=\"paars\"\n    Purple = 0xFF00FF\n}\n\nenum Move {\n    //% block=\"forward\"\n    //% block.loc.nl=\"vooruit\"\n    Forward,\n    //% block=\"backward\"\n    //% block.loc.nl=\"achteruit\"\n    Backward\n}\n\nenum Tracking {\n    //% block=\"◌ ◌ ◌ ◌\" \n    State_0,\n    //% block=\"● ◌ ◌ ◌\" \n    State_1,\n    //% block=\"◌ ● ◌ ◌\" \n    State_2,\n    //% block=\"● ● ◌ ◌\" \n    State_3,\n    //% block=\"◌ ◌ ● ◌\" \n    State_4,\n    //% block=\"● ◌ ● ◌\" \n    State_5,\n    //% block=\"◌ ● ● ◌\" \n    State_6,\n    //% block=\"● ● ● ◌\" \n    State_7,\n    //% block=\"◌ ◌ ◌ ●\" \n    State_8,\n    //% block=\"● ◌ ◌ ●\" \n    State_9,\n    //% block=\"◌ ● ◌ ●\" \n    State_10,\n    //% block=\"● ● ◌ ●\"\n    State_11,\n    //% block=\"◌ ◌ ● ●\" \n    State_12,\n    //% block=\"● ◌ ● ●\" \n    State_13,\n    //% block=\"◌ ● ● ●\" \n    State_14,\n    //% block=\"● ● ● ●\" \n    State_15\n}\n\nenum TrackValue {\n    //% block=\"◌\" \n    Off = 0,\n    //% block=\"●\" \n    On = 1\n}\n\nenum TrackSensor {\n    //% block=\"far left\"\n    //% block.loc.nl=\"ver links\"\n    FarLeft = 1,\n    //% block=\"left\"\n    //% block.loc.nl=\"links\"\n    Left = 2,\n    //% block=\"right\"\n    //% block.loc.nl=\"rechts\"\n    Right = 4,\n    //% block=\"far right\"\n    //% block.loc.nl=\"ver rechts\"\n    FarRight = 8\n}\n\nnamespace CutebotProV2 {\n\n    const cutebotProAddr = 0x10\n\n    function delay_ms(ms: number) {\n        let endTime = input.runningTime() + ms;\n        while (endTime > input.runningTime()) { }\n    }\n\n    export function pid_delay_ms(ms: number) {\n        let time = control.millis() + ms\n        while (1) {\n            i2cCommandSend(0xA0, [0x05])\n            if (pins.i2cReadNumber(cutebotProAddr, NumberFormat.UInt8LE, false) || control.millis() >= time) {\n                basic.pause(500)\n                break\n            }\n            basic.pause(10)\n        }\n    }\n\n    export function i2cCommandSend(command: number, params: number[]) {\n        let buff = pins.createBuffer(params.length + 4);\n        buff[0] = 0xFF;\n        buff[1] = 0xF9;\n        buff[2] = command;\n        buff[3] = params.length;\n        for (let i = 0; i < params.length; i++) {\n            buff[i + 4] = params[i];\n        }\n        pins.i2cWriteBuffer(cutebotProAddr, buff);\n        delay_ms(1);\n    }\n\n    export function motorControl(leftSpeed: number, rightSpeed: number): void {\n        // speed in % [-100, 100]\n        let direction: number = 0;\n        if (leftSpeed < 0)\n            direction |= 0x01;\n        if (rightSpeed < 0)\n            direction |= 0x2;\n        i2cCommandSend(0x10, [2, Math.abs(leftSpeed), Math.abs(rightSpeed), direction]);\n    }\n\n    /**\n     * speed: [40, 100] in %\n     * direction: Move.Forward or Move.Backward\n     * distance: [0, 6000] in cm\n     */\n    export function runDistance(speed: number, distance: number): void {\n        // speed in % [-100,100]\n        // distance in cm\n        distance *= 10 // cm to mm\n        speed *= 5 // % to mm/s [-500,500], not that [-199, 199] will not run\n\n        let tempDistance = distance\n        let distance_h = distance >> 8;\n        let distance_l = distance & 0xFF;\n\n        let direction: Move\n        let direction_flag = (direction == Move.Forward ? 0 : 3);\n        if (speed <= 0) {\n            speed = 0;\n            \n        } else {\n            speed = (speed > 500 ? 500 : speed) < 200 ? 200 : speed;\n        }\n        let speed_h = speed >> 8;\n        let speed_l = speed & 0xFF;\n        i2cCommandSend(0x84, [distance_h, distance_l, speed_h, speed_l, direction_flag]);\n        pid_delay_ms(Math.round(tempDistance * 1.0 / 1000 * 8000 + 3000))\n    }\n\n    export function servoControl(angle: number): void {\n        // angle [0, 180]\n        i2cCommandSend(0x40, [1, angle]);\n    }\n\n    export function ledColor(led: Led, rgb: number): void {\n        let red = (rgb >> 16) & 0xFF;\n        let green = (rgb >> 8) & 0xFF;\n        let blue = (rgb) & 0xFF;\n        i2cCommandSend(0x20, [led, red, green, blue]);\n    }\n}\n\n/*\nNext code is original to the current 'pxt-soccer-player' library.\n(MIT-license)\n*/\n\nenum Player {\n    //% block=\"A\"\n    //% block.loc.nl=\"A\"\n    A,\n    //% block=\"B\"\n    //% block.loc.nl=\"B\"\n    B\n}\n\nlet PLAYER = Player.A\nlet PLAYING = false\nlet POINTS = 0\n\ninput.onButtonPressed(Button.A, function () {\n    if (PLAYER == Player.A)\n        PLAYER = Player.B\n    else\n        PLAYER = Player.A\n    display()\n})\n\ntype eventHandler = () => void\nlet EventOutsideField: eventHandler\nlet EventWinner: eventHandler\nlet EventLoser: eventHandler\n\nfunction handle(cmd: number) {\n\n    /*\n        commands are defined in pxt-soccer as:\n    \n        export enum COMMAND {\n            Start,\n            Stop,\n            PointA,\n            PointB,\n            DisallowA,\n            DisallowB,\n            WinnerA,\n            WinnerB,\n            DisqualA,\n            DisqualB\n        }\n    */\n    switch (cmd) {\n        case CMatch.COMMAND.Start:\n            PLAYING = true\n            break;\n        case CMatch.COMMAND.PointA:\n            if (PLAYER == Player.A) {\n                POINTS += 1\n                display()\n            }\n            break;\n        case CMatch.COMMAND.PointB:\n            if (PLAYER == Player.B) {\n                POINTS += 1\n                display()\n            }\n            break;\n        case CMatch.COMMAND.DisallowA:\n            if (PLAYER == Player.A && POINTS > 0) {\n                POINTS -= 1\n                display()\n            }\n            break;\n        case CMatch.COMMAND.DisallowB:\n            if (PLAYER == Player.B && POINTS > 0) {\n                POINTS -= 1\n                display()\n            }\n            break;\n        case CMatch.COMMAND.WinnerA:\n        case CMatch.COMMAND.DisqualB:\n            if (PLAYER == Player.A) {\n                if (EventWinner) EventWinner()\n                display()\n            }\n            else {\n                if (EventLoser) EventLoser()\n                display()\n            }\n            break;\n        case CMatch.COMMAND.WinnerB:\n        case CMatch.COMMAND.DisqualA:\n            if (PLAYER == Player.B) {\n                if (EventWinner) EventWinner()\n                display()\n            }\n            else {\n                if (EventLoser) EventLoser()\n                display()\n            }\n            break;\n    }\n    PLAYING = (cmd == CMatch.COMMAND.Start)\n}\n\nfunction display() {\n    basic.showNumber(POINTS)\n}\n\n//% color=\"#00CC00\" icon=\"\\uf1f9\"\n//% block=\"Sudo\"\n//% block.loc.nl=\"Sudo\"\nnamespace CSudoPlayer {\n\n    //% color=\"#FFCC00\"\n    //% block=\"when outside the field\"\n    //% block.loc.nl=\"wanneer buiten het speelveld\"\n    export function onEventOutsideField(programmableCode: () => void): void {\n        EventOutsideField = programmableCode;\n    }\n\n    basic.forever(function () {\n        if (PLAYING) {\n            if (ColorSensor.readColor() != Color.White)\n                if (EventOutsideField) EventOutsideField()\n        }\n    })\n\n    //% block=\"motor %motor runs in inverted direction\"\n    //% block.loc.nl=\"motor %motor draait in omgekeerde richting\"\n    export function invertMotor(motor: Nezha.Motor) {\n        INVERT[motor] = true\n    }\n\n    //% block=\"game started\"\n    //% block.loc.nl=\"spel is gestart\"\n    export function isPlaying() {\n        return PLAYING\n    }\n\n    //% subcategory=\"Bal-controle\"\n    //% block=\"shoot the ball\"\n    //% block.loc.nl=\"schiet de bal\"\n    export function shoot() {\n        if (PLAYING) {\n            Nezha.servoAngle(Nezha.Servo.S1, 65)\n        }\n    }\n\n    //% subcategory=\"Bal-controle\"\n    //% block=\"take the ball in possession\"\n    //% block.loc.nl=\"neem balbezit\"\n    export function possessBall() {\n        if (PLAYING) {\n            Nezha.servoAngle(Nezha.Servo.S1, 120)\n        }\n    }\n\n    //% subcategory=\"Bewegen\"\n    //% block=\"run %cm cm %dir\"\n    //% block.loc.nl=\"rijd %cm cm %dir\"\n    //% cm.max=20 cm.min=0\n    export function run(cm: number, dir: Direction) {\n        if (PLAYING) {\n            let speed = (dir ? -15 : 15)\n            go(speed, speed)\n            basic.pause(cm * 1500)\n            go(0, 0)\n        }\n    }\n\n    //% subcategory=\"Bewegen\"\n    //% block=\"turn to the goal\"\n    //% block.loc.nl=\"draai richting het doel\"\n    export function findGoal() {\n        if (PLAYING) {\n            CameraAI.recognize(CameraAI.Recognize.Color)\n            go(15, -15)\n            do {\n                CameraAI.fetchCamera()\n                if (!CameraAI.itemCount())\n                    continue\n                basic.pause(1)\n            } while (CameraAI.itemIsColor(Color.Blue))\n            go(0, 0)\n        }\n    }\n\n    //% subcategory=\"Bewegen\"\n    //% block=\"turn to the start direction\"\n    //% block.loc.nl=\"draai in de startrichting\"\n    export function turnToOpponent() {\n        if (PLAYING) {\n            go(15, -15)\n            while (!isHeading()) { basic.pause(1) }\n            go(0, 0)\n        }\n    }\n\n    //% subcategory=\"Bewegen\"\n    //% block=\"run to the ball\"\n    //% block.loc.nl=\"rijd naar de bal\"\n    export function approachBall() {\n        if (PLAYING) {\n            CameraAI.recognize(CameraAI.Recognize.Ball)\n            go(15, 15)\n            do {\n                CameraAI.fetchCamera()\n            } while (CameraAI.itemPosY() > 200)\n            go(0, 0)\n        }\n    }\n\n    //% subcategory=\"Bewegen\"\n    //% block=\"turn to the ball\"\n    //% block.loc.nl=\"draai richting de bal\"\n    export function findBall() {\n        if (PLAYING) {\n            CameraAI.recognize(CameraAI.Recognize.Ball)\n            go(15, -15)\n            do {\n                CameraAI.fetchCamera()\n            } while (!CameraAI.itemCount())\n            go(0, 0)\n        }\n    }\n\n    //% subcategory=\"Kleuren\"\n    //% color=\"#FFCC44\"\n    //% block=\"rotate at %pace pace\"\n    //% block.loc.nl=\"draai in %pace tempo\"\n    export function setPace(pace: LedRing.Pace) {\n        LedRing.setPace(pace)\n    }\n\n    //% subcategory=\"Kleuren\"\n    //% color=\"#FFCC44\"\n    //% block=\"rotate a snake %rot with color %color\"\n    //% block.loc.nl=\"draai een slang %rot met kleur %color\"\n    //% color.defl=Color.White\n    export function showSnake(rot: LedRing.Rotation, color: Color) {\n        LedRing.snake(color, rot)\n    }\n\n    //% subcategory=\"Kleuren\"\n    //% color=\"#FFCC44\"\n    //% block=\"rotate rainbow %rot\"\n    //% block.loc.nl=\"draai de regenboog %rot\"\n    export function showRainbow(rot: LedRing.Rotation) {\n        LedRing.rainbow(rot)\n    }\n\n    //% subcategory=\"Kleuren\"\n    //% color=\"#FFCC44\"\n    //% block=\"show color %color\"\n    //% block.loc.nl=\"toon de kleur %color\"\n    //% color.defl=Color.White\n    export function showColor(color: Color) {\n        LedRing.setRingRGB(rgb(color))\n    }\n\n    //% subcategory=\"Kleuren\"\n    //% color=\"#FFCC44\"\n    //% block=\"show player color\"\n    //% block.loc.nl=\"toon de spelerkleur\"\n    export function playerColor() {\n        showPlayerColor()\n    }\n\n    //% subcategory=\"Kleuren\"\n    //% group=\"Leds apart\"\n    //% color=\"#FFCC44\"\n    //% block=\"turn all leds off\"\n    //% block.loc.nl=\"schakel alle leds uit\"\n    export function turnLedsOff() {\n        LedRing.setClear()\n    }\n\n    //% subcategory=\"Kleuren\"\n    //% group=\"Leds apart\"\n    //% color=\"#FFCC44\"\n    //% block=\"turn selected leds on\"\n    //% block.loc.nl=\"schakel de ingestelde leds aan\"\n    export function turnLedsOn() {\n        LedRing.showBuffer()\n    }\n\n    //% subcategory=\"Kleuren\"\n    //% group=\"Leds apart\"\n    //% color=\"#FFCC44\"\n    //% block=\"rotate a full circle %rot at %pace pace\"\n    //% block.loc.nl=\"draai een hele cirkel %rot in %pace tempo\"\n    //% pace.defl=Pace.Normal\n    export function circle(rot: LedRing.Rotation, pace: LedRing.Pace) {\n        LedRing.showBuffer()\n        for (let i = 0; i <= 7; i++) {\n            LedRing.rotate(rot)\n            LedRing.showBuffer()\n            basic.pause(pace)\n        }\n    }\n\n    //% subcategory=\"Kleuren\"\n    //% group=\"Leds apart\"\n    //% color=\"#FFCC44\"\n    //% block=\"rotate one position %rot\"\n    //% block.loc.nl=\"draai één positie %rot\"\n    export function rotate(rot: LedRing.Rotation) {\n        LedRing.rotate(rot)\n        LedRing.showBuffer()\n    }\n\n    //% subcategory=\"Kleuren\"\n    //% group=\"Leds apart\"\n    //% color=\"#FFCC44\"\n    //% block=\"set led %num to color %color\"\n    //% block.loc.nl=\"stel led %num in op kleur %color\"\n    //% color.defl=Color.White\n    //% num.min=1 num.max=8\n    export function setLed(num: number, color: Color) {\n        LedRing.setPixelRGB(num - 1, rgb(color))\n    }\n\n    //% subcategory=\"Show\"\n    //% color=\"#FFCC00\"\n    //% block=\"after an obstruction\"\n    //% block.loc.nl=\"na een obstructie\"\n    export function onEventObstruction(programmableCode: () => void): void {\n        EventObstruction = programmableCode;\n    }\n\n    //% subcategory=\"Show\"\n    //% color=\"#FFCC00\"\n    //% block=\"when the loser\"\n    //% block.loc.nl=\"als er verloren is\"\n    export function onEventLoser(programmableCode: () => void): void {\n        EventLoser = programmableCode;\n    }\n\n    //% subcategory=\"Show\"\n    //% color=\"#FFCC00\"\n    //% block=\"when the winner\"\n    //% block.loc.nl=\"als er gewonnen is\"\n    export function onEventWinner(programmableCode: () => void): void {\n        EventWinner = programmableCode;\n    }\n\n    //% subcategory=\"Show\"\n    //% color=\"#FFCC00\"\n    //% block=\"when a goal against\"\n    //% block.loc.nl=\"bij een doelpunt tegen\"\n    export function onEventGoalAgainst(programmableCode: () => void): void {\n        EventGoalAgainst = programmableCode;\n    }\n\n    //% subcategory=\"Show\"\n    //% color=\"#FFCC00\"\n    //% block=\"when an asset goal\"\n    //% block.loc.nl=\"bij een doelpunt voor\"\n    export function onEventGoalAsset(programmableCode: () => void): void {\n        EventGoalAsset = programmableCode;\n    }\n}","README.md":"","pxt.json":"{\n    \"name\": \"pxt-sumo-player\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"pxt-match\": \"github:CBurg-College/pxt-match#d0bd682290a1c42a76f20bdd2091ac14a6d15c38\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1753177336578,"editorVersion":"8.0.11","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"/*\nFrom here to the 'pxt-sudo-player' specific code,\nthe code below is a composition and refactoring of:\n- the ElecFreaks 'pxt-Cutebot-Pro' library:\n  https://github.com/elecfreaks/pxt-Cutebot-Pro/blob/master/v2.ts\nAll under MIT-license.\n*/\n\nenum Led {\n    //% block=\"left\"\n    //% block.loc.nl=\"links\"\n    Left,\n    //% block=\"right\"\n    //% block.loc.nl=\"rechts\"\n    Right,\n    //% block=\"both\"\n    //% block.loc.nl=\"beide\"\n    Both\n}\n\nenum Color {\n    //% block=\"none\"\n    //% block.loc.nl=\"geen\"\n    None = 0x000000,\n    //% block=\"green\"\n    //% block.loc.nl=\"groen\"\n    Green = 0x00FF00,\n    //% block=\"blue\"\n    //% block.loc.nl=\"blauw\"\n    Blue = 0x0000FF,\n    //% block=\"yellow\"\n    //% block.loc.nl=\"geel\"\n    Yellow = 0xFFFF00,\n    //% block=\"black\"\n    //% block.loc.nl=\"zwart\"\n    Black = 0x000000,\n    //% block=\"red\"\n    //% block.loc.nl=\"rood\"\n    Red = 0xFF0000,\n    //% block=\"white\"\n    //% block.loc.nl=\"wit\"\n    White = 0xFFFFFF,\n    //% block=\"orange\"\n    //% block.loc.nl=\"oranje\"\n    Orange = 0xFFA500,\n    //% block=\"cyan\"\n    //% block.loc.nl=\"cyaan\"\n    Cyan = 0x00FFFF,\n    //% block=\"magenta\"\n    //% block.loc.nl=\"magenta\"\n    Magenta = 0xFF00FF,\n    //% block=\"indigo\"\n    //% block.loc.nl=\"indigo\"\n    Indigo = 0x4b0082,\n    //% block=\"violet\"\n    //% block.loc.nl=\"violet\"\n    Violet = 0x8a2be2,\n    //% block=\"purple\"\n    //% block.loc.nl=\"paars\"\n    Purple = 0xFF00FF\n}\n\nenum Move {\n    //% block=\"forward\"\n    //% block.loc.nl=\"vooruit\"\n    Forward,\n    //% block=\"backward\"\n    //% block.loc.nl=\"achteruit\"\n    Backward\n}\n\nenum Tracking {\n    //% block=\"◌ ◌ ◌ ◌\" \n    State_0,\n    //% block=\"● ◌ ◌ ◌\" \n    State_1,\n    //% block=\"◌ ● ◌ ◌\" \n    State_2,\n    //% block=\"● ● ◌ ◌\" \n    State_3,\n    //% block=\"◌ ◌ ● ◌\" \n    State_4,\n    //% block=\"● ◌ ● ◌\" \n    State_5,\n    //% block=\"◌ ● ● ◌\" \n    State_6,\n    //% block=\"● ● ● ◌\" \n    State_7,\n    //% block=\"◌ ◌ ◌ ●\" \n    State_8,\n    //% block=\"● ◌ ◌ ●\" \n    State_9,\n    //% block=\"◌ ● ◌ ●\" \n    State_10,\n    //% block=\"● ● ◌ ●\"\n    State_11,\n    //% block=\"◌ ◌ ● ●\" \n    State_12,\n    //% block=\"● ◌ ● ●\" \n    State_13,\n    //% block=\"◌ ● ● ●\" \n    State_14,\n    //% block=\"● ● ● ●\" \n    State_15\n}\n\nenum TrackValue {\n    //% block=\"◌\" \n    Off = 0,\n    //% block=\"●\" \n    On = 1\n}\n\nenum TrackSensor {\n    //% block=\"far left\"\n    //% block.loc.nl=\"ver links\"\n    FarLeft = 1,\n    //% block=\"left\"\n    //% block.loc.nl=\"links\"\n    Left = 2,\n    //% block=\"right\"\n    //% block.loc.nl=\"rechts\"\n    Right = 4,\n    //% block=\"far right\"\n    //% block.loc.nl=\"ver rechts\"\n    FarRight = 8\n}\n\nnamespace CutebotProV2 {\n\n    const cutebotProAddr = 0x10\n\n    function delay_ms(ms: number) {\n        let endTime = input.runningTime() + ms;\n        while (endTime > input.runningTime()) { }\n    }\n\n    export function pid_delay_ms(ms: number) {\n        let time = control.millis() + ms\n        while (1) {\n            i2cCommandSend(0xA0, [0x05])\n            if (pins.i2cReadNumber(cutebotProAddr, NumberFormat.UInt8LE, false) || control.millis() >= time) {\n                basic.pause(500)\n                break\n            }\n            basic.pause(10)\n        }\n    }\n\n    export function i2cCommandSend(command: number, params: number[]) {\n        let buff = pins.createBuffer(params.length + 4);\n        buff[0] = 0xFF;\n        buff[1] = 0xF9;\n        buff[2] = command;\n        buff[3] = params.length;\n        for (let i = 0; i < params.length; i++) {\n            buff[i + 4] = params[i];\n        }\n        pins.i2cWriteBuffer(cutebotProAddr, buff);\n        delay_ms(1);\n    }\n\n    export function motorControl(leftSpeed: number, rightSpeed: number): void {\n        // speed in % [-100, 100]\n        let direction: number = 0;\n        if (leftSpeed < 0)\n            direction |= 0x01;\n        if (rightSpeed < 0)\n            direction |= 0x02;\n        i2cCommandSend(0x10, [2, Math.abs(leftSpeed), Math.abs(rightSpeed), direction]);\n    }\n\n    export function runDistance(speed: number, distance: number): void {\n        // speed in % [-100, -40] backward and [40, 100] forward\n        // distance in cm [0, 6000]\n\n        distance = ((distance > 6000 ? 6000 : distance) < 0 ? 0 : distance);\n        distance *= 10 // cm to mm\n        let distance_h = distance >> 8;\n        let distance_l = distance & 0xFF;\n\n        let direction: number\n        if (speed <= 0) {\n            speed = -speed\n            direction = 3\n        } else\n            direction = 0\n  \n        speed *= 5 // % to mm/s\n        speed = ((speed > 500 ? 500 : speed) < 200 ? 200 : speed);\n        let speed_h = speed >> 8;\n        let speed_l = speed & 0xFF;\n\n        i2cCommandSend(0x84, [distance_h, distance_l, speed_h, speed_l, direction]);\n        pid_delay_ms(Math.round(distance * 1.0 / 1000 * 8000 + 3000))\n    }\n\n    export function servoControl(angle: number): void {\n        // angle [0, 180]\n        i2cCommandSend(0x40, [1, angle]);\n    }\n\n    export function ledColor(led: Led, rgb: number): void {\n        let red = (rgb >> 16) & 0xFF;\n        let green = (rgb >> 8) & 0xFF;\n        let blue = (rgb) & 0xFF;\n        i2cCommandSend(0x20, [led, red, green, blue]);\n    }\n\n    export function trackingState(): number {\n        i2cCommandSend(0x60, [0x00])\n        let state = pins.i2cReadNumber(cutebotProAddr, NumberFormat.UInt8LE, true)\n        return state\n    }\n\n    export function trackSensor(sensor: TrackSensor): number {\n        let channel: number\n        switch (sensor) {\n            case TrackSensor.FarLeft: channel = 0; break;\n            case TrackSensor.Left: channel = 0; break;\n            case TrackSensor.Right: channel = 0; break;\n            case TrackSensor.FarRight: channel = 0; break;\n        }\n        i2cCommandSend(0x60, [0x02, channel])\n        return pins.i2cReadNumber(cutebotProAddr, NumberFormat.UInt8LE, false)\n    }\n}\n\n/*\nNext code is original to the current 'pxt-soccer-player' library.\n(MIT-license)\n*/\n\nenum Player {\n    //% block=\"A\"\n    //% block.loc.nl=\"A\"\n    A,\n    //% block=\"B\"\n    //% block.loc.nl=\"B\"\n    B\n}\n\nlet PLAYER = Player.A\nlet PLAYING = false\nlet POINTS = 0\n\ninput.onButtonPressed(Button.A, function () {\n    if (PLAYER == Player.A)\n        PLAYER = Player.B\n    else\n        PLAYER = Player.A\n    display()\n})\n\ntype eventHandler = () => void\nlet EventOutsideField: eventHandler\nlet EventWinner: eventHandler\nlet EventLoser: eventHandler\n\nfunction handle(cmd: number) {\n\n    /*\n        commands are defined in pxt-soccer as:\n    \n        export enum COMMAND {\n            Start,\n            Stop,\n            PointA,\n            PointB,\n            DisallowA,\n            DisallowB,\n            WinnerA,\n            WinnerB,\n            DisqualA,\n            DisqualB\n        }\n    */\n    switch (cmd) {\n        case CMatch.COMMAND.Start:\n            PLAYING = true\n            break;\n        case CMatch.COMMAND.PointA:\n            if (PLAYER == Player.A) {\n                POINTS += 1\n                display()\n            }\n            break;\n        case CMatch.COMMAND.PointB:\n            if (PLAYER == Player.B) {\n                POINTS += 1\n                display()\n            }\n            break;\n        case CMatch.COMMAND.DisallowA:\n            if (PLAYER == Player.A && POINTS > 0) {\n                POINTS -= 1\n                display()\n            }\n            break;\n        case CMatch.COMMAND.DisallowB:\n            if (PLAYER == Player.B && POINTS > 0) {\n                POINTS -= 1\n                display()\n            }\n            break;\n        case CMatch.COMMAND.WinnerA:\n        case CMatch.COMMAND.DisqualB:\n            if (PLAYER == Player.A) {\n                if (EventWinner) EventWinner()\n                display()\n            }\n            else {\n                if (EventLoser) EventLoser()\n                display()\n            }\n            break;\n        case CMatch.COMMAND.WinnerB:\n        case CMatch.COMMAND.DisqualA:\n            if (PLAYER == Player.B) {\n                if (EventWinner) EventWinner()\n                display()\n            }\n            else {\n                if (EventLoser) EventLoser()\n                display()\n            }\n            break;\n    }\n    PLAYING = (cmd == CMatch.COMMAND.Start)\n}\n\nfunction display() {\n    basic.showNumber(POINTS)\n}\n\n//% color=\"#00CC00\" icon=\"\\uf1f9\"\n//% block=\"Sudo\"\n//% block.loc.nl=\"Sudo\"\nnamespace CSudoPlayer {\n\n    //% color=\"#FFCC00\"\n    //% block=\"when outside the field\"\n    //% block.loc.nl=\"wanneer buiten het speelveld\"\n    export function onEventOutsideField(programmableCode: () => void): void {\n        EventOutsideField = programmableCode;\n    }\n\n    basic.forever(function () {\n        if (PLAYING) {\n            if (ColorSensor.readColor() != Color.White)\n                if (EventOutsideField) EventOutsideField()\n        }\n    })\n\n    //% block=\"motor %motor runs in inverted direction\"\n    //% block.loc.nl=\"motor %motor draait in omgekeerde richting\"\n    export function invertMotor(motor: Nezha.Motor) {\n        INVERT[motor] = true\n    }\n\n    //% block=\"game started\"\n    //% block.loc.nl=\"spel is gestart\"\n    export function isPlaying() {\n        return PLAYING\n    }\n\n    //% subcategory=\"Bal-controle\"\n    //% block=\"shoot the ball\"\n    //% block.loc.nl=\"schiet de bal\"\n    export function shoot() {\n        if (PLAYING) {\n            Nezha.servoAngle(Nezha.Servo.S1, 65)\n        }\n    }\n\n    //% subcategory=\"Bal-controle\"\n    //% block=\"take the ball in possession\"\n    //% block.loc.nl=\"neem balbezit\"\n    export function possessBall() {\n        if (PLAYING) {\n            Nezha.servoAngle(Nezha.Servo.S1, 120)\n        }\n    }\n\n    //% subcategory=\"Bewegen\"\n    //% block=\"run %cm cm %dir\"\n    //% block.loc.nl=\"rijd %cm cm %dir\"\n    //% cm.max=20 cm.min=0\n    export function run(cm: number, dir: Direction) {\n        if (PLAYING) {\n            let speed = (dir ? -15 : 15)\n            go(speed, speed)\n            basic.pause(cm * 1500)\n            go(0, 0)\n        }\n    }\n\n    //% subcategory=\"Bewegen\"\n    //% block=\"turn to the goal\"\n    //% block.loc.nl=\"draai richting het doel\"\n    export function findGoal() {\n        if (PLAYING) {\n            CameraAI.recognize(CameraAI.Recognize.Color)\n            go(15, -15)\n            do {\n                CameraAI.fetchCamera()\n                if (!CameraAI.itemCount())\n                    continue\n                basic.pause(1)\n            } while (CameraAI.itemIsColor(Color.Blue))\n            go(0, 0)\n        }\n    }\n\n    //% subcategory=\"Bewegen\"\n    //% block=\"turn to the start direction\"\n    //% block.loc.nl=\"draai in de startrichting\"\n    export function turnToOpponent() {\n        if (PLAYING) {\n            go(15, -15)\n            while (!isHeading()) { basic.pause(1) }\n            go(0, 0)\n        }\n    }\n\n    //% subcategory=\"Bewegen\"\n    //% block=\"run to the ball\"\n    //% block.loc.nl=\"rijd naar de bal\"\n    export function approachBall() {\n        if (PLAYING) {\n            CameraAI.recognize(CameraAI.Recognize.Ball)\n            go(15, 15)\n            do {\n                CameraAI.fetchCamera()\n            } while (CameraAI.itemPosY() > 200)\n            go(0, 0)\n        }\n    }\n\n    //% subcategory=\"Bewegen\"\n    //% block=\"turn to the ball\"\n    //% block.loc.nl=\"draai richting de bal\"\n    export function findBall() {\n        if (PLAYING) {\n            CameraAI.recognize(CameraAI.Recognize.Ball)\n            go(15, -15)\n            do {\n                CameraAI.fetchCamera()\n            } while (!CameraAI.itemCount())\n            go(0, 0)\n        }\n    }\n\n    //% subcategory=\"Kleuren\"\n    //% color=\"#FFCC44\"\n    //% block=\"rotate at %pace pace\"\n    //% block.loc.nl=\"draai in %pace tempo\"\n    export function setPace(pace: LedRing.Pace) {\n        LedRing.setPace(pace)\n    }\n\n    //% subcategory=\"Kleuren\"\n    //% color=\"#FFCC44\"\n    //% block=\"rotate a snake %rot with color %color\"\n    //% block.loc.nl=\"draai een slang %rot met kleur %color\"\n    //% color.defl=Color.White\n    export function showSnake(rot: LedRing.Rotation, color: Color) {\n        LedRing.snake(color, rot)\n    }\n\n    //% subcategory=\"Kleuren\"\n    //% color=\"#FFCC44\"\n    //% block=\"rotate rainbow %rot\"\n    //% block.loc.nl=\"draai de regenboog %rot\"\n    export function showRainbow(rot: LedRing.Rotation) {\n        LedRing.rainbow(rot)\n    }\n\n    //% subcategory=\"Kleuren\"\n    //% color=\"#FFCC44\"\n    //% block=\"show color %color\"\n    //% block.loc.nl=\"toon de kleur %color\"\n    //% color.defl=Color.White\n    export function showColor(color: Color) {\n        LedRing.setRingRGB(rgb(color))\n    }\n\n    //% subcategory=\"Kleuren\"\n    //% color=\"#FFCC44\"\n    //% block=\"show player color\"\n    //% block.loc.nl=\"toon de spelerkleur\"\n    export function playerColor() {\n        showPlayerColor()\n    }\n\n    //% subcategory=\"Kleuren\"\n    //% group=\"Leds apart\"\n    //% color=\"#FFCC44\"\n    //% block=\"turn all leds off\"\n    //% block.loc.nl=\"schakel alle leds uit\"\n    export function turnLedsOff() {\n        LedRing.setClear()\n    }\n\n    //% subcategory=\"Kleuren\"\n    //% group=\"Leds apart\"\n    //% color=\"#FFCC44\"\n    //% block=\"turn selected leds on\"\n    //% block.loc.nl=\"schakel de ingestelde leds aan\"\n    export function turnLedsOn() {\n        LedRing.showBuffer()\n    }\n\n    //% subcategory=\"Kleuren\"\n    //% group=\"Leds apart\"\n    //% color=\"#FFCC44\"\n    //% block=\"rotate a full circle %rot at %pace pace\"\n    //% block.loc.nl=\"draai een hele cirkel %rot in %pace tempo\"\n    //% pace.defl=Pace.Normal\n    export function circle(rot: LedRing.Rotation, pace: LedRing.Pace) {\n        LedRing.showBuffer()\n        for (let i = 0; i <= 7; i++) {\n            LedRing.rotate(rot)\n            LedRing.showBuffer()\n            basic.pause(pace)\n        }\n    }\n\n    //% subcategory=\"Kleuren\"\n    //% group=\"Leds apart\"\n    //% color=\"#FFCC44\"\n    //% block=\"rotate one position %rot\"\n    //% block.loc.nl=\"draai één positie %rot\"\n    export function rotate(rot: LedRing.Rotation) {\n        LedRing.rotate(rot)\n        LedRing.showBuffer()\n    }\n\n    //% subcategory=\"Kleuren\"\n    //% group=\"Leds apart\"\n    //% color=\"#FFCC44\"\n    //% block=\"set led %num to color %color\"\n    //% block.loc.nl=\"stel led %num in op kleur %color\"\n    //% color.defl=Color.White\n    //% num.min=1 num.max=8\n    export function setLed(num: number, color: Color) {\n        LedRing.setPixelRGB(num - 1, rgb(color))\n    }\n\n    //% subcategory=\"Show\"\n    //% color=\"#FFCC00\"\n    //% block=\"after an obstruction\"\n    //% block.loc.nl=\"na een obstructie\"\n    export function onEventObstruction(programmableCode: () => void): void {\n        EventObstruction = programmableCode;\n    }\n\n    //% subcategory=\"Show\"\n    //% color=\"#FFCC00\"\n    //% block=\"when the loser\"\n    //% block.loc.nl=\"als er verloren is\"\n    export function onEventLoser(programmableCode: () => void): void {\n        EventLoser = programmableCode;\n    }\n\n    //% subcategory=\"Show\"\n    //% color=\"#FFCC00\"\n    //% block=\"when the winner\"\n    //% block.loc.nl=\"als er gewonnen is\"\n    export function onEventWinner(programmableCode: () => void): void {\n        EventWinner = programmableCode;\n    }\n\n    //% subcategory=\"Show\"\n    //% color=\"#FFCC00\"\n    //% block=\"when a goal against\"\n    //% block.loc.nl=\"bij een doelpunt tegen\"\n    export function onEventGoalAgainst(programmableCode: () => void): void {\n        EventGoalAgainst = programmableCode;\n    }\n\n    //% subcategory=\"Show\"\n    //% color=\"#FFCC00\"\n    //% block=\"when an asset goal\"\n    //% block.loc.nl=\"bij een doelpunt voor\"\n    export function onEventGoalAsset(programmableCode: () => void): void {\n        EventGoalAsset = programmableCode;\n    }\n}","README.md":"","pxt.json":"{\n    \"name\": \"pxt-sumo-player\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"pxt-match\": \"github:CBurg-College/pxt-match#d0bd682290a1c42a76f20bdd2091ac14a6d15c38\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1753179143314,"editorVersion":"8.0.11","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"enum Player {\n    //% block=\"A\"\n    //% block.loc.nl=\"A\"\n    A,\n    //% block=\"B\"\n    //% block.loc.nl=\"B\"\n    B\n}\n\nlet PLAYER = Player.A\nlet PLAYING = false\nlet POINTS = 0\n\n/*\nFrom here to the 'pxt-sudo-player' specific code,\nthe code below is a composition and refactoring of:\n- the ElecFreaks 'pxt-Cutebot-Pro' library:\n  https://github.com/elecfreaks/pxt-Cutebot-Pro/blob/master/v2.ts\nAll under MIT-license.\n*/\n\nenum Led {\n    //% block=\"left\"\n    //% block.loc.nl=\"links\"\n    Left,\n    //% block=\"right\"\n    //% block.loc.nl=\"rechts\"\n    Right,\n    //% block=\"both\"\n    //% block.loc.nl=\"beide\"\n    Both\n}\n\nenum Color {\n    //% block=\"none\"\n    //% block.loc.nl=\"geen\"\n    None = 0x000000,\n    //% block=\"green\"\n    //% block.loc.nl=\"groen\"\n    Green = 0x00FF00,\n    //% block=\"blue\"\n    //% block.loc.nl=\"blauw\"\n    Blue = 0x0000FF,\n    //% block=\"yellow\"\n    //% block.loc.nl=\"geel\"\n    Yellow = 0xFFFF00,\n    //% block=\"black\"\n    //% block.loc.nl=\"zwart\"\n    Black = 0x000000,\n    //% block=\"red\"\n    //% block.loc.nl=\"rood\"\n    Red = 0xFF0000,\n    //% block=\"white\"\n    //% block.loc.nl=\"wit\"\n    White = 0xFFFFFF,\n    //% block=\"orange\"\n    //% block.loc.nl=\"oranje\"\n    Orange = 0xFFA500,\n    //% block=\"cyan\"\n    //% block.loc.nl=\"cyaan\"\n    Cyan = 0x00FFFF,\n    //% block=\"magenta\"\n    //% block.loc.nl=\"magenta\"\n    Magenta = 0xFF00FF,\n    //% block=\"indigo\"\n    //% block.loc.nl=\"indigo\"\n    Indigo = 0x4b0082,\n    //% block=\"violet\"\n    //% block.loc.nl=\"violet\"\n    Violet = 0x8a2be2,\n    //% block=\"purple\"\n    //% block.loc.nl=\"paars\"\n    Purple = 0xFF00FF\n}\n\nenum Move {\n    //% block=\"forward\"\n    //% block.loc.nl=\"vooruit\"\n    Forward,\n    //% block=\"backward\"\n    //% block.loc.nl=\"achteruit\"\n    Backward\n}\n\nenum Tracking {\n    //% block=\"◌ ◌ ◌ ◌\" \n    State_0,\n    //% block=\"● ◌ ◌ ◌\" \n    State_1,\n    //% block=\"◌ ● ◌ ◌\" \n    State_2,\n    //% block=\"● ● ◌ ◌\" \n    State_3,\n    //% block=\"◌ ◌ ● ◌\" \n    State_4,\n    //% block=\"● ◌ ● ◌\" \n    State_5,\n    //% block=\"◌ ● ● ◌\" \n    State_6,\n    //% block=\"● ● ● ◌\" \n    State_7,\n    //% block=\"◌ ◌ ◌ ●\" \n    State_8,\n    //% block=\"● ◌ ◌ ●\" \n    State_9,\n    //% block=\"◌ ● ◌ ●\" \n    State_10,\n    //% block=\"● ● ◌ ●\"\n    State_11,\n    //% block=\"◌ ◌ ● ●\" \n    State_12,\n    //% block=\"● ◌ ● ●\" \n    State_13,\n    //% block=\"◌ ● ● ●\" \n    State_14,\n    //% block=\"● ● ● ●\" \n    State_15\n}\n\nenum TrackValue {\n    //% block=\"◌\" \n    Off = 0,\n    //% block=\"●\" \n    On = 1\n}\n\nenum TrackSensor {\n    //% block=\"far left\"\n    //% block.loc.nl=\"ver links\"\n    FarLeft = 1,\n    //% block=\"left\"\n    //% block.loc.nl=\"links\"\n    Left = 2,\n    //% block=\"right\"\n    //% block.loc.nl=\"rechts\"\n    Right = 4,\n    //% block=\"far right\"\n    //% block.loc.nl=\"ver rechts\"\n    FarRight = 8\n}\n\nnamespace CutebotProV2 {\n\n    const cutebotProAddr = 0x10\n\n    function delay_ms(ms: number) {\n        let endTime = input.runningTime() + ms;\n        while (endTime > input.runningTime()) { }\n    }\n\n    export function pid_delay_ms(ms: number) {\n        let time = control.millis() + ms\n        while (1) {\n            i2cCommandSend(0xA0, [0x05])\n            if (pins.i2cReadNumber(cutebotProAddr, NumberFormat.UInt8LE, false) || control.millis() >= time) {\n                basic.pause(500)\n                break\n            }\n            basic.pause(10)\n        }\n    }\n\n    export function i2cCommandSend(command: number, params: number[]) {\n        let buff = pins.createBuffer(params.length + 4);\n        buff[0] = 0xFF;\n        buff[1] = 0xF9;\n        buff[2] = command;\n        buff[3] = params.length;\n        for (let i = 0; i < params.length; i++) {\n            buff[i + 4] = params[i];\n        }\n        pins.i2cWriteBuffer(cutebotProAddr, buff);\n        delay_ms(1);\n    }\n\n    export function motorControl(leftSpeed: number, rightSpeed: number): void {\n        // speed in % [-100, 100]\n\n        if (!PLAYING) return\n\n        let direction: number = 0;\n        if (leftSpeed < 0)\n            direction |= 0x01;\n        if (rightSpeed < 0)\n            direction |= 0x02;\n        i2cCommandSend(0x10, [2, Math.abs(leftSpeed), Math.abs(rightSpeed), direction]);\n    }\n\n    export function runDistance(speed: number, distance: number): void {\n        // speed in % [-100, -40] backward and [40, 100] forward\n        // distance in cm [0, 6000]\n\n        if (!PLAYING) return\n\n        distance = ((distance > 6000 ? 6000 : distance) < 0 ? 0 : distance);\n        distance *= 10 // cm to mm\n        let distance_h = distance >> 8;\n        let distance_l = distance & 0xFF;\n\n        let direction: number\n        if (speed <= 0) {\n            speed = -speed\n            direction = 3\n        } else\n            direction = 0\n  \n        speed *= 5 // % to mm/s\n        speed = ((speed > 500 ? 500 : speed) < 200 ? 200 : speed);\n        let speed_h = speed >> 8;\n        let speed_l = speed & 0xFF;\n\n        i2cCommandSend(0x84, [distance_h, distance_l, speed_h, speed_l, direction]);\n        pid_delay_ms(Math.round(distance * 1.0 / 1000 * 8000 + 3000))\n    }\n\n    export function servoControl(angle: number): void {\n        // angle [0, 180]\n\n        if (!PLAYING) return\n\n        i2cCommandSend(0x40, [1, angle]);\n    }\n\n    export function ledColor(led: Led, rgb: number): void {\n        let red = (rgb >> 16) & 0xFF;\n        let green = (rgb >> 8) & 0xFF;\n        let blue = (rgb) & 0xFF;\n        i2cCommandSend(0x20, [led, red, green, blue]);\n    }\n\n    export function trackingState(): number {\n        i2cCommandSend(0x60, [0x00])\n        let state = pins.i2cReadNumber(cutebotProAddr, NumberFormat.UInt8LE, true)\n        return state\n    }\n\n/*\n    export function trackSensor(sensor: TrackSensor): number {\n        let channel: number\n        switch (sensor) {\n            case TrackSensor.FarLeft: channel = 0; break;\n            case TrackSensor.Left: channel = 0; break;\n            case TrackSensor.Right: channel = 0; break;\n            case TrackSensor.FarRight: channel = 0; break;\n        }\n        i2cCommandSend(0x60, [0x02, channel])\n        return pins.i2cReadNumber(cutebotProAddr, NumberFormat.UInt8LE, false)\n    }\n*/\n}\n\n/*\nNext code is original to the current 'pxt-soccer-player' library.\n(MIT-license)\n*/\n\ninput.onButtonPressed(Button.A, function () {\n    if (PLAYER == Player.A)\n        PLAYER = Player.B\n    else\n        PLAYER = Player.A\n    display()\n})\n\ntype eventHandler = () => void\nlet EventLeftOutOfField: eventHandler\nlet EventRightOutOfField: eventHandler\nlet EventBothOutOfField: eventHandler\nlet EventWinner: eventHandler\nlet EventLoser: eventHandler\n\nfunction handle(cmd: number) {\n\n    /*\n        commands are defined in pxt-soccer as:\n    \n        export enum COMMAND {\n            Start,\n            Stop,\n            PointA,\n            PointB,\n            DisallowA,\n            DisallowB,\n            WinnerA,\n            WinnerB,\n            DisqualA,\n            DisqualB\n        }\n    */\n    switch (cmd) {\n        case CMatch.COMMAND.Start:\n            PLAYING = true\n            break;\n        case CMatch.COMMAND.PointA:\n            if (PLAYER == Player.A) {\n                POINTS += 1\n                display()\n            }\n            break;\n        case CMatch.COMMAND.PointB:\n            if (PLAYER == Player.B) {\n                POINTS += 1\n                display()\n            }\n            break;\n        case CMatch.COMMAND.DisallowA:\n            if (PLAYER == Player.A && POINTS > 0) {\n                POINTS -= 1\n                display()\n            }\n            break;\n        case CMatch.COMMAND.DisallowB:\n            if (PLAYER == Player.B && POINTS > 0) {\n                POINTS -= 1\n                display()\n            }\n            break;\n        case CMatch.COMMAND.WinnerA:\n        case CMatch.COMMAND.DisqualB:\n            if (PLAYER == Player.A) {\n                if (EventWinner) EventWinner()\n                display()\n            }\n            else {\n                if (EventLoser) EventLoser()\n                display()\n            }\n            break;\n        case CMatch.COMMAND.WinnerB:\n        case CMatch.COMMAND.DisqualA:\n            if (PLAYER == Player.B) {\n                if (EventWinner) EventWinner()\n                display()\n            }\n            else {\n                if (EventLoser) EventLoser()\n                display()\n            }\n            break;\n    }\n    PLAYING = (cmd == CMatch.COMMAND.Start)\n}\n\nfunction display() {\n    basic.showNumber(POINTS)\n}\n\n//% color=\"#00CC00\" icon=\"\\uf1f9\"\n//% block=\"Sudo\"\n//% block.loc.nl=\"Sudo\"\nnamespace CSudoPlayer {\n\n    let SPEED = 0\n\n    //% color=\"#FFCC00\"\n    //% block=\"when left side is out of the field\"\n    //% block.loc.nl=\"wanneer de linkerkant buiten het speelveld is\"\n    export function onEventLeftOutOfField(programmableCode: () => void): void {\n        EventLeftOutOfField = programmableCode;\n    }\n\n    //% color=\"#FFCC00\"\n    //% block=\"when right side is out of the field\"\n    //% block.loc.nl=\"wanneer de rechterkant buiten het speelveld is\"\n    export function onEventRightOutOfField(programmableCode: () => void): void {\n        EventRightOutOfField = programmableCode;\n    }\n\n    //% color=\"#FFCC00\"\n    //% block=\"when both sides are out of the field\"\n    //% block.loc.nl=\"wanneer beide kanten uit het speelveld zijn\"\n    export function onEventBothOutOfField(programmableCode: () => void): void {\n        EventBothOutOfField = programmableCode;\n    }\n\n    basic.forever(function () {\n        if (PLAYING) {\n            let state = CutebotProV2.trackingState()\n            let left = state & (TrackSensor.FarLeft + TrackSensor.Left)\n            let right = state & (TrackSensor.FarRight + TrackSensor.Right)\n            if (left && right) {\n                if (EventBothOutOfField) EventBothOutOfField\n            }\n            else\n            if (left) {\n                if (EventLeftOutOfField) EventLeftOutOfField\n            }\n            else\n            if (right) {\n                if (EventRightOutOfField) EventRightOutOfField\n            }\n        }\n    })\n\n    //% block=\"game started\"\n    //% block.loc.nl=\"spel is gestart\"\n    export function isPlaying() {\n        return PLAYING\n    }\n\n    //% subcategory=\"Bewegen\"\n    //% block=\"run %cm cm %dir\"\n    //% block.loc.nl=\"rijd %cm cm %dir\"\n    //% cm.max=20 cm.min=0\n    export function run(cm: number, dir: Move) {\n    }\n\n    //% subcategory=\"Bewegen\"\n    //% block=\"turn to the opponent\"\n    //% block.loc.nl=\"draai richting tegenstander\"\n    export function findOpponent() {\n    }\n\n    //% subcategory=\"Bewegen\"\n    //% block=\"run to the opponent\"\n    //% block.loc.nl=\"rijd naar de tegenstander\"\n    export function approachOpponent() {\n    }\n\n    //% subcategory=\"Bewegen\"\n    //% block=\"push the opponent\"\n    //% block.loc.nl=\"duw de tegenstander\"\n    export function pushOpponent() {\n    }\n\n    //% subcategory=\"Kleuren\"\n    //% color=\"#FFCC44\"\n    //% block=\"show color %color\"\n    //% block.loc.nl=\"toon de kleur %color\"\n    //% color.defl=Color.White\n    export function showColor(color: Color) {\n    }\n\n    //% subcategory=\"Kleuren\"\n    //% color=\"#FFCC44\"\n    //% block=\"turn both leds off\"\n    //% block.loc.nl=\"schakel beide leds uit\"\n    export function turnLedsOff() {\n    }\n\n    //% subcategory=\"Show\"\n    //% color=\"#FFCC00\"\n    //% block=\"when the loser\"\n    //% block.loc.nl=\"als er verloren is\"\n    export function onEventLoser(programmableCode: () => void): void {\n        EventLoser = programmableCode;\n    }\n\n    //% subcategory=\"Show\"\n    //% color=\"#FFCC00\"\n    //% block=\"when the winner\"\n    //% block.loc.nl=\"als er gewonnen is\"\n    export function onEventWinner(programmableCode: () => void): void {\n        EventWinner = programmableCode;\n    }\n}","README.md":"","pxt.json":"{\n    \"name\": \"pxt-sumo-player\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"pxt-match\": \"github:CBurg-College/pxt-match#d0bd682290a1c42a76f20bdd2091ac14a6d15c38\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}}],"shares":[],"lastSaveTime":1753179817242}